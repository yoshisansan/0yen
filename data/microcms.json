[
  {
    "id": "6tsccfrpmpx",
    "createdAt": "2021-08-12T05:54:38.331Z",
    "updatedAt": "2021-08-12T14:33:09.137Z",
    "publishedAt": "2021-08-12T05:54:38.331Z",
    "revisedAt": "2021-08-12T14:33:09.137Z",
    "title": "Webサービス開発者が活用した独学用のプログラミング学習サイト",
    "body": "<p>「プログラミングを学習できるサイトがたくさんあるけれどどう手をつけていけば良いのわからない」<br><br>そんな人はYoutubeで動画をググりましょう。基本的にYoutubeの動画講座だけで抑えられます。詳細は後ほど。（月１０００円程度を課金してもいいよという人はドットインストールがオススメ）<br><br>特に初学者でこれから触ろうという人にとっては指針がなければどう選んでいけば良いのかわからないはず。<br><br>そこで現在、個人でWebサービス運営して事業にしていきたいと考えている自分が活用してきた学習サイトを初学者のヒントになる知見も交えて解説します。<br><br>読んだ人が自身のフェーズと目的に応じて一本の道筋を立てられることを目指して書きました。<br><br>自分は 100g.jp と呼ばれる欲しい食材からとれる栄養素をすぐに知れる栄養サービスサイトをフロントエンドの技術メインで制作して運営している者です。<br><br>「野良開発のススメ」は<strong>独学でWebサービスサイトを作れるようになりたい人へ向けて</strong>記事を書いています。<br></p><h2 id=\"hf09ca89b95\">はじめに：初学者レベルという概念</h2><p>これは自分の創作であって実際にあるわけではありません。<br>しかし初学者とひと口にいってもレベルの違いがあると考えています。レベル別で適切な教材は変わります。<br><br>初学者レベル１ パソコンの基本的な操作ができない<br>初学者レベル２ パソコンの基本的な操作はできるがコードを書いたことがない<br>初学者レベル３ 何かしらのコードを書いたことが少しだけある（おおよそ１００時間未満）<br><strong>初学者レベル４ 何かしらのコードを書いたことがある（おおよそ１００時間以上）</strong><br>初学者レベル５ 簡易的なサイト制作やオリジナルの小さな機能を模写ではなく７割程度は自力で作ったことがある<br>初学者レベル６ 技術的な問題を誰かに質問できる（わからないことがわかる）<br>初学者レベル７ 簡易的な技術記事を書くことができる（学んだ範囲で人に教えることができる）<br>e.t.c（あとは人それぞれになってくる）<br><br>初学者レベル６、７あたりは賛否両論あるかと思いますが先輩や同僚などへの相互レビューしたりプレゼンできる機会のない\"独学者には\"マストな力だと考えています。<br><br>初学者レベル４の１００時間以上ということは１日２〜３時間こなして２ヶ月〜３ヶ月未満は必要になります。<br><br>１００時間ということに科学的な根拠はないのですが１００時間もやればプログラミングの雰囲気くらいは流石に誰でもわかるくらいの学習時間だと考えています。<br>（もちろん能力値やセンスなどは人それぞれで全く異なりますが「野良開発のススメ」はセンスの特別に高い人を読者として想定していません。）<br><br>一部のセンスの高い人は別ですが、おそらく９割以上の人は地道にエラーを一つずつ検索して潰しながら動かしてその挙動を把握してようやく動きが少しわかる、ということ繰り返していっているので最初はカジュアルで良いですがどこかのタイミングで本腰を入れる必要があります。<br><br>そして初学者レベル４以前の人と以降の人とでは学習のアプローチは変わるべきだと考えています。<br><br>初学者レベル４以下の人→プログラミングとお知り合いになるために学習サイトを活用する<br>初学者レベル５以上の人→プログラミングに関する目標にあった学習サイトを活用する<br><br>という方針で解説しました。<br></p><h2 id=\"hbc1cb9f8e6\">初学者レベル４以下の人にオススメのプログラミング学習サイト</h2><p>（初学者レベル５以上の人はスルーしてください）<br><br>結論からいうと、<br><br>１. 文法はYoutube「言語名 + 入門」などでググって出てきた講座で覚える（月１０００円ちょっと課金してもいいよって人はドットインストール）<br>２. Youtubeで簡易的に動くものを作る講座をやる（言語名にプラスして開発、ゲーム、アプリ、Todoなどのキーワードでググる）<br>３. プラスアルファで動くものを作る（後ほど教材のリサーチ手法を紹介）<br><br>上の順序で最終的に３、４個何か作ってみることで十分だと思います。<strong>初学者レベル４以下の人はどこで何を学習しても大体同じです。</strong><br><br>この段階で吸収できる内容に関する学習サイトはたくさんあり書籍にしても良質な教材も多いため教えられ方による差はほとんど生じません。<br><br>英語でAからZまで覚えたり、This is a penの構文を学んだりはどこで学習してもほとんど同じであることに似ているかもしれません。<br><br>この段階で誰かに教わらないと先へ進めない方はおそらくプログラミングとは違う箇所にネックを抱えている可能性があります。<br><br>例えばパソコン自体がほぼ初めての方、コンピューターと慣れ親しんでいないご年配の方、未成年で道すじが多く必要、苦手意識のトラウマがある、学習に支障をきたすなんらかの条件のある方 e.t.c<br><br>そうした条件に当てはまる場合はこの記事を読んだ上で独習できなさそうであれば援助してくれるところを探すと良いかもしれません。<br></p><h3 id=\"h9ed699d46f\">パソコン操作が怪しい人</h3><p>ホームポジションのクセをつけたタイピングを習得→<a style=\"background-color:#ffffff\" href=\"http://typingx0.net/sushida/\" target=\"_blank\" rel=\"noopener noreferrer\">寿司打</a>でタイピングで操作ミスしないようにするタイピングを覚える<br><br>のルートをたどりましょう。<br><br>初学者レベル０の方はまずこちらから。習うより慣れろと言いたいところですがタイピングだけは習ってから慣れましょう。<br><br>どこで学べるのか？という点に関しては、<br><br>ホームポジションについては<a href=\"https://typing.twi1.me/training\" target=\"_blank\" rel=\"noopener noreferrer\">ひよこでも出来るタイピング練習講座</a>のサイトを一通り読めば理解できるかと。<br>ホームポジションがわかったら<a href=\"http://typingx0.net/sushida/\" target=\"_blank\" rel=\"noopener noreferrer\">寿司打</a>でタイピングミスを減らしながら打鍵していく練習をしましょう。（ミス０回にする必要はなし）<br><br>プログラミング以前にタイピングがまともにできないと学習時間が物理操作だけで溶けていきます。<br>人に教わる機会などがあっても物理操作で時間がかかると他人の時間も地味に溶けていきお互いにあまり嬉しくないことに。<br><br>例えば１日１万回の打鍵をするとして、１０打あたりの入力時間が５秒の人なら操作だけで８３分、２秒の人なら３３分の時間が必要で５０分近くもプログラミングできる時間が変わってしまいます。<br><br>最初はブラインドタッチができなくても問題ありません。しかし<strong>そのうちブラインドタッチのできるようなタイピングができるようになる</strong>必要はあると考えています。<br><br>そのためには<strong>ホームポジション（基本的な指の位置）をクセ付けしたタイピング</strong>ができるようになりましょう。<br><br><a href=\"http://typingx0.net/sushida/\" target=\"_blank\" rel=\"noopener noreferrer\">寿司打</a>のゲームはエンジニアの人たちにも人気なゲームのため選びました。現役の人たちが触れているものに基本的に触れるとよいと考えています。<br><br>ちなみにこの後、自分がMacbookのキーボードを使って１００００円コースを２回プレイしたところ１万人中１８６３位と微妙な結果に。<br>（もっと速いに越したことはないなという戒め）<br><br>最近は大学生でも学習ツールとしてはiPadの方が優れていたり利便性が高かったりするのでパソコンにあまり触れていない人は少なくないかなと思います。<br><br>最初からブラインドタッチができるレベルにならなくても良いですが、正しい指の位置を覚えながらタッチタイピングから練習することをお勧めします。<br>決してやりすぎず、プログラミングしながらタイピングを上達できる土壌をつくるイメージで取り組みましょう。<br></p><h3 id=\"h2e1a8f018b\">文法を覚える</h3><p>Youtubeで「言語名 + 入門」「言語名 + 初心者」などで検索すれば基本について学べます。<br><br>動画を見ながらやるのがニガテな人は月１０００円ちょっとの課金でドットインストールで「言語名 + 入門」に関連するキーワードの講座をこなせば十分です。<br><br>初学者レベル２以上の人は<strong>文法を最低限だけまずは覚えましょう。</strong><br><br>前提として初学者が最初から適切な言語を選ぶことは困難だと思うので１００時間の学習に使う言語は正直なんでも良いと考えています。<br>そして開発する際に使わない文法は繰り返し学習しても頭からすぐに抜け落ちます。<br>（プログラミングに暗記が不要な理由。という記事を準備中）<br><br>他にも色々な学習サイトがありますがこだわりがあればそちらを使っても良いかと思います。<br>（おまけですが基本的に相手にするマスのサイズが大きい英語の無料教材の方が高クオリティです。英語でググれる人は英語教材を推奨）<br><br>まずとにかく触ってみた上で続けられそうだな、とか他の言語にできることはなんだろう。とか好奇心が広がっていって自主的に必要なものを選ぶことにつながるかと。<br></p><h3 id=\"h6da8bfc1f2\">言語の選定はどうする</h3><p><br>言語選定に関しては、下に運営者のど偏見で記したので合いそうなやつを適当に選んでみてください。<br><br><strong>Web系</strong><br>JavaScript→ブラウザ上で動く言語なのでかなり広範囲で利用されている。見た目側を触ることになる人はいずれ出会う。バックエンドでもnodeという名前使われて普及してきているので大体みんな一回は出会う。<br>Ruby→少し前の時代だとスタートアップといえばRuby on Railsを使って高速Webサービス開発だった。RubyだけでWebサービスの大体のことができるので一度覚えれば強いが初学者には学習量がややヘビーな言語でもある。<br>PHP→プログラミング界のファッションセンターしまむら。初学者にも入口を開いてくれてる優しい存在。モダンな技術が好きな人にはなぜか敬遠されがちだが何気に進化し続けておりバックエンドのLaravelのフレームワークが最近は人気。扱える人口も多いし情報量もそれなり。<br><br><strong>分析系</strong><br>Python→機械学習ブームによりPythonといえば機械学習となり人気になっている。人気の割にPython限定での求人などはガチガチのデータサイエンティスト以外ではあまり聞かない。他の言語にプラスしてPythonのライブラリ使って便利機能を搭載できたら良い気がする。<br><br><strong>アプリ系</strong><br>Swift→iOSアプリといえばObject-Cではなく最近はSwift。<br>Flutter→言語名はDartだがもはやFlutterというフレームワークとしての固有名詞の方が知名度高い。Flutter一つでiOSとAndroidの両方を開発できて開発もしやすく運用もしやすいと評判。Flutterから始めて仕事にしている初学者も中にはいる。<br>Java→AndroidアプリといえばJava。他にもデカい会社が使ってる。他の言語と違い低水準言語に近いためアルゴリズム力がないと難しいしJavaを２、３年やってた人は他の言語もすぐに習得できそう。みたいな印象を受ける。アドテックと呼ばれるような高速処理が必要な分野で使われてたりするものの最近はGoなど。Kotolinがなんか人気らしいけどよく知らん。<br><br>ちなみにホームページやLPを作りたいという人はHTML/CSSとデザイン + jQuery を少々かじる程度にまずは学べば良いかと思います。<br>（野良開発のススメでは想定していない読書層なので深堀はせず）<br><br><strong>Webサービスを独学で作れるようになりたい人</strong>はHTML/CSS以外の言語を選び基本的な言語の文法を身につけましょう。<br>HTML/CSSを最低限さわれることはほぼマストですがどのみち他の言語を触る中で扱うハメになります。<br><br>そして文法は勉強しすぎる意味はあまりありません。<br>しかし<strong>少なくともIF文(条件分岐)とFOR文(繰り返し処理)はどの言語でもマストなので覚えておきましょう。</strong><br><br>プログラミングはIF文とFOR文さえ書ければ大抵のことができます。<br>基本的に条件分岐と繰り返し処理を使いいかにその間に色々な処理をよりスマートに詰め込むのか、ということをやっています。<br><br>他の文法はIF文とFOR文にプラスアルファしたものが中心になってきます。<br><br>そのため最低でも選んだ言語なりの書き方でIF文とFOR文を扱えるようになりましょう。<br><br>それ以降は模写で良いのでまずは動くものを作りましょう。<br><br>作った後に余裕があればわからなかったコードを理解に使われている文法を調べたり、挙動についてログを出力しながら理解していきましょう。<br>さらに余裕があれば改造しましょう。<br><br>（きつかったらパスして良いですがここはかなり大切なパートです。ここでコードを理解すれば他の場所で同じような処理が必要になった場合にすぐに思い出せたり記憶としてより定着することにつながります。）<br><br>コードを後から理解したいなら簡単そうなお題が良いです。<br><br>ちなみに運営者はゲームの説明書を読むより手を動かしてから動きを覚えて必要とあらば説明書を読むタイプで座学があまり得意ではありません。<br>しかし中にはしっかりと説明書を読んでからプレイしたい人もおりプログラミング学習でも似たようなものかと。<br><br>そのため、<br>説明書をしっかり読みたいタイプの人→一通りの文法を覚えてから動くものを作る（教材の中級〜上級コースまでやってみる）<br>動くものを先に作りたいタイプの人→IF文とFOR文の書き方を覚えたら動くものを作る（ただし分からない箇所がでたら都度、基本を学ぶ）<br><br>のどちらかお好きな方を選んでください。<br></p><h3 id=\"h5fd920d6e8\">楽しさを重視すると中長期的に良い</h3><p>初学者レベル４以下の段階は楽しいと思えるかどうかを知る段階かと。<br><br>SNSなどで出回っているコンテンツは効率だけをとにかく重視していてその人のことを中長期的に考えていそうなものをあまり見たことがありません。<br>（商材を販売することや転職してもらうことがゴールとなっておりその先のことを考える経営インセンティブが働かないためと推測しています。）<br><br>楽しいかどうかは精神論ではなく何年も続けるために必要不可欠な材料です。<br>楽しいということはそれだけで誰に教わるわけでもなく自主的に何かをするモチベーションになります。<br><br>効率重視の商材は確かに優れもので良い補助輪となりますが優れているがゆえにサポートがなくなった後に寄り道しながら徐々に技術力を底上げしていくような気持ちは湧かないのではないのかなと考えます。<br><br>たとえ学習時間が無駄に多くなったとしても 効率 &lt; 楽しさ が勝ると考えているくらいには大事なところかと。<br><br>特に独学で学習する人にとって継続を続けるためにこの感覚がなければどこかで一気に燃え尽きます。（例えばWebサービスが完成した途端に燃え尽きるなど）<br><br>運営者も本格的にコーディングに打ち込み始めたのはここ２年ですが本当の意味ではじめてプログラミングを触った時はポケコンと呼ばれる高機能な電卓で使ったBASIC言語でクソアプリを作ったときでした。<br><br>（選択式のシミュレーションのしょぼいクソゲーム。友達にプレイさせてクソゲーならではの理不尽を味あわせることが楽しかった。当時の自分最低では?）<br><br>その時からプログラミングで何か作ってる時が楽しいなーという感覚はありましたしその時のような楽しい感覚が今もあるのでお賃金がもらえるわけでもなく個人でWebサービス開発を独学で作ることも楽しくできているのかなと思います。<br><br>後にエラーで頭が禿げそうな気持ちになった時にも辛い気持ちと楽しい気持ちの天秤で楽しい気持ちが勝っている限りは続けることは何ら苦痛ではありません。<br><br></p><h3 id=\"hcb94b4160c\">学習する言語を選びきれない人はJavaScript</h3><p>運営者がJavaScriptマンなのでバイアスが大いにかかっていますが、JavaScriptは誰しも多かれ少なかれ触ることになるのでJavaScriptをオススメします。<br><br>ブラウザ上で動く言語なのでこのサイトでも使われていますしほぼ全てのサイトでJavaScriptは使われています。<br><br>そのため汎用性がとても高いので必ずどこかで多少なりとも役に立ちます。そしてJavaScriptを触る場合はHTML/CSSも大なり小なり触る羽目になるので一緒に覚えることができます。<br><br><strong>初学者レベル４以下にJavaScriptがおすすめな理由</strong><br><br>・すぐに動きをつけることができて楽しい<br>・簡単なアプリならブラウザ上ですぐに作れる<br>・ブラウザで動いている言語なので誰しも一度は出会う<br>・中級者向けだがJavaScriptで大体全てのことができる（Webサービス開発、アプリ開発、デスクトップ開発からドローン操作まで）<br>・JavaScript周りの技術が成熟しつつあって再注目されている<br><br>ただし、中級者向けの内容（フレームワークを扱ったり）になると一気に沼にハマりやすくなるのは注意ポイントです。<br>最初は気にする必要ありません。<br><br>ちなみに、データ解析が必要な人はPythonでほぼ一択だと思いますです。自動操作ツールなどであればJavaScriptでも作れます。<br></p><h3 id=\"h9fe4e1114f\">とにかく写経で良いので動くものを作る</h3><p>基本的な文法を最低限は覚えたらとりあえず動くものを作ってみましょう。<br><br>Youtubeで言語名にプラスして開発、ゲーム、アプリ、Todoなどのキーワードでググると色々と出てきます。<br><br>自分が作ってみたいものを作りましょう。贅沢を言えば作った後のコードを理解できた方が良いので簡易的なお題のものほどベターです。<br></p><h3 id=\"h450bfe1047\">さらにプラスアルファで何かを作る</h3><p>月１０００円ちょっと課金しても良いよという人はドットインストールのお題をこなせば良いかと。<br>（言語によっては講座が少なかったりするので事前にリサーチお願いします）<br><br>中高レベルの英語がわかる人は英語の教材の方が基本的には品質が高いのでオススメです。<br>Youtubeで検索用語を英語に変えてもたくさん出てきます。<br><br><strong>JavaScriptであれば「JavaScript30」が圧倒的にオススメ</strong><br><a href=\"https://javascript30.com/\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript30</a>とはエンジニア系Youtuberでもある wes bos氏 が作った１日１題でJavaScriptを使って何か作ってみようというコンセプトの動画サイトです。<br><br>自分がJavaScriptを復習するときにお世話になったサイトです。<br>今でもリファレンスとして「<a href=\"https://javascript30.com/\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript30</a>」で学習した内容でド忘れした書き方を見に行ったりしていて役に立っています。<br><br>無料であることと、扱っている題材が面白いこと、コードの書き方が新しいこと（ECMAScriptの書き方）などのメリットがあります。<br>とりあえずJS学習する人には自分はよくオススメしてます。<br><br>※GitHubの教材テンプレートをクローン(コピーしてPCへ落とす)する必要があるのでGitHubの操作も別途習得しないといけません。<br><a href=\"https://github.com/wesbos/JavaScript30\" target=\"_blank\" rel=\"noopener noreferrer\">wesbos/JavaScript30</a><br><br>Youtubeで「github 使い方」でググれば色々と出てきます。<br><br><br></p><h2 id=\"hffa18db72a\">初学者レベル５以上の人は目標に応じて学習サイトの活用方法が変わる</h2><p>ある程度プログラミングとお見知りおきになれたらプログラミングを通じて実現したいことを踏まえた目標を立てて、学習サイトを活用していく段階になります。<br></p><h3 id=\"h53949b0c19\">目標を設定する</h3><p>ただ楽しんでやりたい。という人はその好奇心の赴くままに遊びちぎっていただきたいのですが、そうではない場合は目標の設定が必要だと考えています。<br><br>「いや、目標なんかないんだけど」という人は お金をかけずに独学でプログラミングを覚えてWebサービス開発できるようになるまでの手順 の記事にマインドマップを活用しながら目標設定するまでの手順を一通りに載せています。<br><br>目標があることによって必要な情報のフィルタリングがかなり容易になります。<br><br>どこまで掘り下げた学習が良いのか、<br>成果物を作る必要はあるのか、<br>成果物を作る場合はどんなものを作れば良いのか、<br>必要な成果物をどのように作れば良いのか、<br>どのように学習サイトを選んでいけば良いのか、<br><br>といった情報の取捨選択を行うフィルタリングへの強い根拠となります。<br><br>目標を考えても思いつかない方は楽しいと感じる気持ちをそのまま最大限に伸ばしていき四六時中コードのことを考えていても苦痛に感じない「プログラミング中毒者」になることを目標にすることをオススメします。<br><br>プログラミングが面白い、楽しいと感じる気持ちは生涯学習が必要なプログラミングの世界においてモチベーションの大黒柱のように大切なものだと考えています。<br><br>数年続けた後に「やっぱり面白くないや」となるリスクを避けられます。<br>（もっとも途中で関心がなくなってもディレクションやコンサル方面のキャリアもあるのでどハマりしなくても良かったりはするかと）<br></p><h3 id=\"h800054190a\">作りたいものを見つけて作っていく</h3><p><strong style=\"background-color:#ffffff\">作りたいものに必要な機能を絞ったり、必要な言語を選定できている人は機能ごとに切り分けて実装してみてください。</strong><br><br>全体像をまずは知りたい人はTechpitという１教材につき１サービスサイトのコンテンツのあるプラットフォームが大きなヒントになります。<br>SNSを作るというお題や、管理アプリを作ろうというお題、Tinder風のアプリを作ろうというものまであります。<br><br>もしくはUdemyという動画プラットフォームでも「言語名 + tinder」などで検索するとひとまとまりで作りたいものに近いものを選んで全体像をコードを書きながら知れるようになります。<br><br>適切なものが見つからない場合はYoutubeで「言語名 + login 」「言語名 + CRUD」などで習得に必要なタイトルで英語と日本語の両方を使ってググれば無料で色々と出てきます。<br><br>それでも見つからない場合はGoogle上で英語で「言語名 + 作りたいもの + how to make」みたいな単語を組み合わせてググっていれば色々と出てきますよ。<br><br><strong>必要な機能を絞れない場合は作りたいものに近いものに近い教材を一通りこなしてまずは作る過程をイメージ</strong>できるようにしましょう。<br><br></p><h3 id=\"h1106c7ef6d\">どのみち必要になる技術</h3><p>・GitHub の操作<br>・コマンドライン / ターミナル の操作<br>・環境構築<br><br>どこかのタイミングで上の３つのトピックはぶち当たることになります。<br>個人でWebサービスを作る場合はマストなのでどこかで上記のトピックだけに絞ってYoutubeやドットインストールで学習しましょう。<br></p><h2 id=\"h2fff1d5538\">初学者レベル５以上の足りない力を補う目的で扱う学習サイト</h2><p>ここから先は初学者および中級者を問わず足りない力を補う目的でプログラミングを行います。<br><br>プログラミングの世界では学習できる内容が無尽蔵にあるため優先順位をつけざるを得ません。<br><br>作りたいものを作っている中で不足を感じた能力に関しては都度、補っていく形で学習サイトを活用すると身につきます。<br>というより「そうそう、そこが知りたかったんだよ」と\"身に沁みる\"といった表現の方が近いかもしれません。<br><br>・基礎力<br>・アルゴリズム力<br>・理解力<br>・読解力<br>・デザイン力<br>・自走力<br><br>さて、上のようにさまざまな能力が求められているわけですが作りたいものに応じて必要性は変わってきます。<br>足りないと感じたらぜひ活用してみてください。<br></p><h3 id=\"hbbb162a7d9\">・基礎力</h3><p>コンピューターサイエンス→<a href=\"https://recursionist.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Recursion</a><br>Web基礎→<a href=\"https://developer.mozilla.org/ja/docs/Learn\" target=\"_blank\" rel=\"noopener noreferrer\">MDN Web Doc</a><br><br><strong>コンピューターサイエンス</strong>は教養みたいなものでジワジワと色々な箇所で薄く広く役に立ってくれます。<br>Recursionは無料でわかりやすく、Web上で学習できるので今のところ最強の教材だと思います。（初級までしかやってないけどそのうち上級まで触ります）<br><br>今でこそ010101...を考えなくともうまいことブラックボックスで動いてくれていますがWebを超えた空間についてまで考える必要がある段階になった時など特に役に立つかと思います。<br><br>自分はCASL2と呼ばれる機械語に近い言語を触ったことがありますがとにかく面倒でした。見えないところでコンピューターがこんな面倒なことやってくれるんだな。と月並みですがありがとう。と感謝の念を覚えました（３秒くらい）。<br><br><br><strong>Web基礎</strong>はバックエンドメインの人にとっては触りながら身につくと思うのですが自分のようにフロントエンドメインで触っていると身につきませんでした。<br><br>例えばHTTP通信でよく遭遇するCORSと呼ばれる概念などは面倒だから放置しがちです。<br>シーケンス図というHTTP通信を時系列で追った図形などは理解できるようになってないとAPIのやり取りの際に詰むかと思います。<br><br>全体図については書籍で学ぶ方が基本は良いですが細かいところはMDN Web Docというmozillaの公式ドキュメントの情報から学べば間違いありません。<br>（初学者は文章をきちんと読むのが少し大変だと思います）<br></p><h3 id=\"h99c0aa9139\">・アルゴリズム力</h3><p>カジュアルにアルゴリズム力を磨きたい→<a href=\"https://paiza.jp/\" target=\"_blank\" rel=\"noopener noreferrer\">Paiza</a><br>他人と競いながらアルゴリズム力を磨きたい→<a href=\"https://atcoder.jp/?lang=ja\" target=\"_blank\" rel=\"noopener noreferrer\">AtCoder</a><br><br><a style=\"background-color:#ffffff\" href=\"https://paiza.jp/\" target=\"_blank\" rel=\"noopener noreferrer\">Paiza</a>はDランクからSランクまでのアルゴリズム力を問う問題をたくさん用意しています。<br>プログラミングの知識があまりなくてもできることが強いです。<br><br><a style=\"background-color:#ffffff\" href=\"https://atcoder.jp/?lang=ja\" target=\"_blank\" rel=\"noopener noreferrer\">AtCoder</a>は競技プログラミングコンテストのことです。定期的にお題が出題されるので誰よりも高速で短い時間で解答することを目指します。<br>Paizaより敷居は高く、初学者にはとっつきづらいかもしれません。<br><br>しかし中には高校生で最上位にランクイン（赤色）になっていたりと若い人でも挑戦しています。<br></p><h3 id=\"h2bd20fc0d0\">・理解力</h3><p><a href=\"https://teratail.com/\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>teratail</strong></a><strong>で質問する</strong><br>teratailとはエンジニア向け質疑応答のWebサービスのことです。<br><br>初学者の方は<strong>\"わからないことがわからない\"</strong>ものです。そのため初めのうちは質問がそもそもできない。しても上手にできない傾向にあるかなと思います。<br><br>逆にいえば誰かから回答がもらえる質問ができるようになれば<strong>\"わからないことがわかっている\"</strong>ことを証明することができます。<br><br>自分も最初はteratailで質問をよくしていました。<br><br>最初は自分なりに頑張って書いた質問に心ない言葉をもらってしまい萎えてしまいましたが何回か質問していくにつれちゃんとした回答がもらえるようになりました。<br><br>ありがたいことです。<br><br>積極的に質問できるようになりましょう。（いつか何らかの形で回答する側に回れるようになりましょう）<br>文章は質問テンプレートがあるのでそれに沿って書けば一応形は誰でも作れます。<br><br><br><a href=\"https://qiita.com/\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>Qiita</strong></a><strong>に記事を投稿する</strong><br>技術記事として書けるということは内容を理解していることの証明になります<br>（内容が間違っている可能性もありますが概ね理解できていないとそもそも文章を書けません）<br><br>ラーニングピラミッドと呼ばれる理解するためのある程度の指標では誰かに教えることがもっとも上位にあります。<br><br>独学で学習していると人に教える機会も少ないので記事を書くことがアウトプットの貴重な場となります。<br><br>また理解していることの確認以外にもあれやこれやと技術をずっと触り続けていると前に触ったことについては忘れてしまいます。<br>その時にQiitaで自分の書いた文章を読むとすぐに思い出すことができます。<br><br>自分の場合はteratailで質問を何度かしていくにつれてQiitaにも記事を投稿できる文章が書けるようになりました。<br><br>ちなみに自分のQiitaアカウントは<a href=\"https://qiita.com/akifumiyoshimu\" target=\"_blank\" rel=\"noopener noreferrer\">これ</a>です。<br></p><h3 id=\"h8e4bd5f538\">・読解力</h3><p>新しい技術を触る際には公式サイトのチュートリアルから触る<br>公式ドキュメントを参照する癖をつける<br>技術者の書いた記事を読む<br><br>などを意識すると良いかと思います。<br><br>初学者の頃は理解できない記事が多くて辛いかもしれませんが何度も繰り返していくうちに少しずつ理解できる記事が増えていくと思います。<br></p><h3 id=\"hea5e45c9c5\">・デザイン力</h3><p><a href=\"https://chot.design/\" target=\"_blank\" rel=\"noopener noreferrer\"> chot.design</a><br>Youtubeの「デザインツール名 + UI」や「デザインツール名 + UI」など<br><br>デザインサイドも色々な学習サイトやコンテンツが充実しています。<br>デザイン側までカバーするのは大変なので流行りのデザインで比較的にお手軽なもの（マテリアルデザインなど）を取り入れたり最初からある程度はデザインづけされたライブラリなどもあるのでそうしたものを取り入れていくと学習コストを低く済ますことができます。<br></p><h2 id=\"ha214098e44\">まとめ</h2><p>どれだけ学習サイトを知っていても適切な学習サイトを選ぶための根拠となる目標がなければ活かすことは難しいと考えています。<br><br>中には適当に遊んでハイスキルになるような例外的な人はいますが殆どの人にとって再現できません。<br>目標をある程度は絞ってあたりをつけるやり方を「野良開発のススメ」では提案しています。<br><br>その点については別記事を参考ください。<br><br>さて、次はプログラミングと直接関係ないものの必要不可欠な要素があります。<br><br>それは英語（のリーディング力）です。といっても便利なツールがたくさんあるため次のページでは英語と上手に付き合うために自分が使っているツールや知見などを共有します。<br></p>",
    "time": "2021-08-11T17:00:00.000Z",
    "thumbnail": {
      "url": "https://images.microcms-assets.io/assets/ae335419fcf84360abab9385ede92248/5ce7a19cf41549379da4bd31d5e5b0ef/nora6.jpg",
      "height": 271,
      "width": 880
    },
    "slug": "learn-site",
    "genre": [
      "programming"
    ],
    "isParent": true
  },
  {
    "id": "d5g-m02q_i",
    "createdAt": "2021-08-11T15:07:09.103Z",
    "updatedAt": "2021-08-12T14:32:17.878Z",
    "publishedAt": "2021-08-11T15:07:09.103Z",
    "revisedAt": "2021-08-12T14:32:17.878Z",
    "title": "こうして自分は作りました。個人開発におけるWebサービスの作り方【機能や技術の分解と組み立てを繰り返す】",
    "description": "\n",
    "body": "<p>「作りたいWebサービスがあるけれど何からどう手をつけて良いのかわからない」「わからないことがわからない」<br><br>この状態の初学者がこの先をくっきり見えるようにするには、<strong>結論からいうと「分解」して一つひとつで何か作ることを繰り返す。以上になります。</strong><br><br>「いうは易し行うは難し」であり実際は分析して綺麗に組み立てていく、というより実体験としては「壁にぶつかりながら形を確かめていく」とか「走りながら考えていく」といった方向に近いものです。<br><br>しかしこの記事で書かれている内容を意識して手を動かすのととにかく突撃するのとでは挫折率がかなり変わるのではないのかな。と思います。<br><br>この記事はシリーズ化されています。この記事の内容が「自分にはまだ早いな」となった場合は以前の記事を読むことをオススメします。<br><br>今回は③と④に関して手を動かしていきます。<br>①プログラミングに関する目標を設定する<br>②目標に必要な技術や成果物を調べる<br><strong>③目標に必要な技術や成果物を分解して一つひとつで何か作る</strong><br><strong>④分解した一つひとつで何かを作るという小さな目標のそれぞれで②と③を繰り返す</strong><br><strong>⑤目標に必要な技術を習得して成果物を完成させる</strong><br><br></p><h2 id=\"h9d6ad35cdd\">Webサービスとはうまく連携された機能群のこと</h2><p>Webサービスを作るのであれば技術的な観点からWebサービスとはそもそも何かを再認識したいところです。<br><br>つまりに「うまく連携された機能群」のことをWebサービスと言うこともできるかと。<br><br>ところでTwitterにある機能は何ですか？<br><br>と聞かれてすぐに４、５個くらいなら思いつくかと思います。<br>それらを足し算して組み合わせてるんだなと。<br><br>結局のところどんなWebサービスも機能群でしかなく機能単体で実装できればそれを組み立てれば良いだけです。<br><br>だからといって機能毎にググってコピペしていけばいいじゃないか。というわけにもいきません。<br>機能と機能を組み合わせてうまく連携させたいのであれば組み合わせて生じる様々なトラブルや今後の管理の面での注意点などいろいろな要素が一気にからまってきます。<br><br>そしていざエラーが生じた際にもコード単位で中身の挙動を把握できないとエラーの際に対処できないからです。<br><br>結局、拙いコードであっても自身の内から出てきたコードでないと有機的に組み合わせることは簡単ではありません。<br></p><h2 id=\"hfd76f8e898\">マインドマップに必要な機能や技術、言語などを書き出してみる</h2><p><strong style=\"background-color:#ffffff\">③目標に必要な技術や成果物を分解して一つひとつで何か作る</strong>について深堀します。ここに例を出しました。<br><img src=\"https://images.microcms-assets.io/assets/ae335419fcf84360abab9385ede92248/2c51871d309e4a2ab5b73a496bec5f5b/beer4.jpg\" alt=\"\"><br>画像は運営者が適当に「ビールをレビューできるWebサービス」を考えて機能を洗い出してみたものです。<br>作りたいWebサービスに関連する事柄を思いつくままに書き出してみてください。<br><br>書き出したら次は整理してみましょう。<br><br>ユーザーが何かしたら記録（投稿など）する機能はCRUDを意識して整理するとやりやすいです。<br>つまり作成、一覧の読み込み、作成した内容を編集してアップデート、作成したものを削除することができる機能です。<br><br>「ビールをレビューできるWebサービス」で簡単に機能のアイデア出しをしたところ下のような機能が必要であることがわかりました。<br><img src=\"https://images.microcms-assets.io/assets/ae335419fcf84360abab9385ede92248/a316995b9cc642b4abdb65e47177261c/beer2.jpg\" alt=\"\"><br><br>ここで、選定言語に関して、フロントエンドとバックエンドで分けていることがわかります。ここの技術選定は同じことのできる好きな言語で大丈夫です。<br><br>「ビールをレビューできるWebサービス」では実装時間を短縮する目的でサーバーサイドの言語は使わず、サーバー側はFirebaseと呼ばれるデータベース的なものを簡易に用意できるサービスを使うことにしました。<br><img src=\"https://images.microcms-assets.io/assets/ae335419fcf84360abab9385ede92248/052d022fd85a4cab8327b99da70ba36a/beer5.jpg\" alt=\"\"><br>フロントエンド側にHTML/CSSがないよ？と思った人もいるかもしれませんが、Reactと呼ばれるJavaScriptのフレームワーク側でそれに変わるJSX（と CSS in JSと呼ばれるもの）を扱うためです。<br><br>ここでフロントエンドとサーバーサイドに扱う言語は同じことが実装できればなんでも良いです。<br>結局は目標にあった形で実装することになります。<br></p><h3 id=\"h7f84033146\">余裕があれば関連するトピックを分岐させていく</h3><p>「作りきること」という大ボスがいるのであまり考えすぎる意味はないですがよりリリース後の見通しをよくするために運用や集客に関連するトピックも追加しておいても良いです。<br><img src=\"https://images.microcms-assets.io/assets/ae335419fcf84360abab9385ede92248/116675ffcd6e476f8ecb87eb7a46a301/beer6.jpg\" alt=\"\"><br><br></p><h3 id=\"h9723313328\">機能や言語が思いつかない場合</h3><p>質問サイトで尋ねたり、勉強会に参加したりしてエンジニアの人に聞くのも良いかと思います。<br><br>学習コストをあまりいとわないのであればRuby（Ruby on Rails）だと一つの言語で幅広くカバーできます。<br><br>時短で作りたい場合は比較的に学習コストがまだ優しいPHPを使ったり、もしくはVue（JavaScriptのフレームワーク）とFirebaseを使って作ってフロント中心に作ってみることも良いでしょう。<br></p><h3 id=\"h27b0463397\">言語を選定したらプロトタイプを作る</h3><p>簡易的で良いのでデザイン側も作っておきます。（四角形を並べるだけでも良い）<br>そうするとページ遷移が見えてくるため後からルーティング（ページの切り替え）で問題が生じにくくなります。<br><br>デザインはにっちもさっちもと言う人はプロトタイプを誰でも作ることのできるツールがあるのでそれを使っていきましょう。<br>多少はデザインを触る学習コストを費やしても良いという人はFigmaがオススメです。<br><br>デザインにも力を入れたい人はAdobeが提供しているXDというツールが高機能です。<br><br>プロトタイプができたら次は実装です。<br></p><h3 id=\"hf8d0803ef4\">言語と機能別に実装してみる</h3><p>ここからが本番。<br>この時に想定しているスキルの想定している最低の前提条件ですが、なんでも良いのでプログラミングを１００時間以上は触っていること、選定した言語の基本文法は触っている状態です。<br><br>今回の例における「ユーザー情報の操作」、「ビールログ」、「ビール検索」とありますがどれから手をつけるべきでしょうか。特に順番はありませんが、「レコメンド」などは作っていく途中でないと実際の形は見えにくい気がします。<br><img src=\"https://images.microcms-assets.io/assets/ae335419fcf84360abab9385ede92248/a316995b9cc642b4abdb65e47177261c/beer2.jpg\" alt=\"\"><br>そこで「ユーザー情報の操作」から扱ってみると仮定してみます。<br><br>といってもどこから触れば良いのかわからないことでしょう。（イメージが掴める人はそのまま実装してもらって問題ありません）<br></p><h3 id=\"h7530df042e\"><strong style=\"background-color:#ffffff\">④分解した一つひとつで何かを作るという小さな目標のそれぞれで②と③を繰り返す</strong></h3><p>「ユーザー情報の操作」という機能単体を実装してくださいと言われても手が止まってしまった人はここでさらに機能を分解して切り離して考える必要があります。<br><br>「ユーザー情報の操作」を実装するために必要な技術は何でしょうか？箇条書きで洗い出します。<br><br>・サーバーにユーザー情報を保存<br>・保存したユーザー情報の取得（ログイン機能）<br>・操作の実行後の画面の切り替え（ルーティング）<br>・CRUDの実装<br>・フォームに入力された文字のバリデーション<br>...etc<br><br>などこれだけ色々と出てきました。<br><br>では頭の「サーバーにユーザー情報を保存」を実装してみましょう。<br>と言われてもサーバーにリクエストを投げて保存する順序がよくわからないと思います。<br>つまり、さらに\"サーバーへリクエストを投げてユーザー情報を保存すること\"について機能を分解して実装してみる。ということが必要です。<br><br>言い換えると、洗い出した機能が実装できそうにないなという場合はさらに実装を細分化して一つひとつを実装していく必要があると言うことです。<br><br>プログラミングにある程度は慣れている人であれば同時に実装していくことはできるかと思いますが初学者はデータを昇順に並べ替えることだけでもとっさにどうやれば良いのか思いつかないのではないでしょうか。<br><br>とするとここまで細々と分解して実装することにリアリティを持たせていく方法は遠回りに見えて必要不可欠だと思います。<br></p><h3 id=\"h007cb4a1a6\">一通り完成されたアプリを作りきる教材や動画講座で写経する</h3><p>「細分化してさらに細分化っていわれてると気が遠くなる」と感じた人もいるかもしれません。<br><br>自分もいきなり細々とやることが嫌いなタイプなので最初にざっと全体像を知れること、一気に機能をつけてとにかく動くものを作りたい！思うタイプなのでわかります。<br><br>なのでそうした人には成果物を作りきるコンテンツを模写で良いので作ってみます。<br>そうすると全体像が見えてきますし動かす楽しさを味わえるのでプログラミング楽しい〜！となりやすい。<br><br>ただし、初学者が写経をずっとしても吸収できることは少ない点は注意が必要かと。<br><br>自分がこれまで書いてきたコードがある人であれば「今まで何行も書いていたところを一行で表してる」とか「この名前の付け方の方がわかりやすかったな」と他人のコードを見ながら内省できるのですが初学者にはそれがないためです。<br><br>なので写経するだけでも息切れしそうになるかもしれませんが写経ばかりするのは避けたいところです。<br>（写経した後にオリジナリティの要素を勝手に付け加える、改造するというのなら問題なし。）<br></p><h2 id=\"h2670935187\">運営者がWebサービスをリリースするまでに辿った道のり</h2><p>最後に<strong style=\"background-color:#ffffff\">⑤目標に必要な技術を習得して成果物を完成させる</strong>について実体験を共有してイメージを掴んでもらいたいと思います。<br><br>自分が作った 100g.jp は、全食材リストの中に含まれる栄養素を、栄養素のトピック別に昇順に並べ替えて表示するWebサービスサイトです。<br><br>ユーザー登録するとユーザーにあった栄養素の量で計算して表示してくれるようになります。<br>それ以外はメディアやブログとあまり変わりません。<br><br>アクセスされる度に計算させているのでアルゴリズムの処理がややこしいものの、機能そのものはシンプルなのでそこまで時間がかからないかな、と思われます。<br>最初、制作期間を３ヶ月程度と適当に見積もって開発しました。<br><br>しかし実際には１年もかかってしまいました。<br><br>これは使ったことのない技術を盛り込んだことが大きく関わっています。<br></p><h3 id=\"h5387e48678\">100g.jp を作る以前のスキル感</h3><p>100g.jpを作る前からJavaScriptのフレームワークであるReactを習得するため、関連のUdemy動画を４、５本こなしたり書籍を複数読んだりした上でデータをフィルタリングするシンプルなサービスを作ったり、Reactの特定の機能を覚えるためのネタアプリなどを作成していました。<br><br>要するにとても簡易的な単一ページのアプリを作成できる程度のレベルです。<br><br>それ以外であれば所属していたエンジニアコミュニティでPHPやVueを使った簡単な機能の実装やブログページの改変したり運営代行しているサイトのWordpressテンプレートをそれなりに改造してデザインからPHPを多少いじる程度のことはやっていました。<br></p><h3 id=\"h4959186f25\">実装したことのない機能と初めての規模の大きさ、使ったことのない技術の組み合わせなどが相まって時間を費やす</h3><p><strong>専門用語はわからなくて大丈夫です。なんかいっぱい新しいことを覚えていたんだね。こんな感じで実装していって時間がかかってしまったんだね。</strong>と言うことを流し読みで見てもらえればと。<br><br>さて、 100g.jp では React以外に<br><br>・GatsbyJS（フレームワーク）<br>・TypeScript（JavaScriptに型をつけるやつ）<br>・Firebase（のFireStoreと呼ばれるもの）<br>・使ったことのないホスティングサービス（Gatsby Cloud）<br>・microCMS（記事を保存するやつ）<br><br>を採用しています。<br><br>加えて実装する機能も、<br><br>・ログイン周りの機能<br>・ユーザー情報を操作する機能<br>・食材データを計算する機能<br>・個人最適化のデータを表示する機能<br><br>などなど今までの実装したものに比べるとチャレンジングなものでした。<br><br>先に述べたように自身のレベル感はReactの単一ページアプリだけでゼイゼイしていたので自分の中ではかなりチャレンジングです。<br></p><h3 id=\"h4d63587e9a\">そして一つひとつを実装していった</h3><p>とにかく手が動かないのでまずは扱う技術そのものとお知り合いになる必要があると判断しこなしていきました。<br><br>複数の技術を組み合わせるというところからそもそも想像することができません。<br><br>JavaScript→必要だと思ったので改めて基礎をやり直す（JavaScript30というやつをやった）<br><br>TypeScript→チュートリアルをこなす、書籍を読む、 babelとwebpackを使って簡単な処理をトランスパイルする、ReactとTypeScriptに関する何かしらの教材をやる、TypeScriptを使ったChrome拡張機能を作る（Chrome拡張機能が初めてだったのでその前に違うアプリを２つほど作る） e.t.c<br><br>Firebase→ログイン機能オンリーでアプリを作る、書籍のアプリを作りながらデータ操作を行って挙動を見てみる e.t.c<br><br>GatsbyJS→Udemyの動画を2,3本やる、簡易ブログを作ってみる(Gatsby Cloudを使ってみる)、FirebaseとGatsbyJSを連動したUdemy講座をこなす e.t.c<br><br>他の技術もだいたい同じように単体でまずはお知り合いになることからはじめました。細かいところは覚えていませんが上の量はこなしました。<br><br>しかし実際のところ、これらのタスクを全て終わらせてから 100g.jp へ取り組んだわけではありません。<br>途中まで進めて「あ、無理っぽいな」と思ったら基礎へ戻るという形で往復しながらこなしていました。<br><br>必要に感じたら基礎に戻る、そしてある程度はこなしてから本命を開発する。という流れです。<br><br>例えば 100g.jp で最初、教材などに触れた上でも TypeScript が全然わからなかったので途中まで使わずに実装していました。<br>途中から TypeScript を実装しました。（面倒だったので一部コピペしながら作り直した）<br><br>GatsbyJSというフレームワークに関しても日本語の情報がほとんどないためUdemyのFirebaseとGatsbyJSを連動した講座を模写して作ったコードを流用して自身のコードへ改造したりする周りくどいことをしました。<br>内容によっては英語の情報ですらまともに出てこなかったり大変でした。<br><br>TypeScriptがそこに合わさるとやはり時間がかかってしまいました。<br><br>新しい技術とお知り合いになったら今度は本命である 100g.jp を開発します。<br>ログイン周りの機能、ユーザー情報を操作する機能、食材データを計算する機能、個人最適化のデータを表示する機能の実装をこなしていくわけですが、これらも同じように手こずりながら実装していきました。<br><br>（特に数十万行のデータを扱うこと自体が初めてであり今でも上手く関数を切り分けながらコードを書けなかったなあと思っています。やはり初めて触る技術だとまともなコードを書くのは難しい）<br></p><h3 id=\"h75b482186f\">運営者が高カロリーな技術選定をした理由</h3><p>そもそもこんなに技術を取りいなくとももう少しシンプルに作ることができました。<br>TypeScriptとGatsbyJSを使わなければもっと簡単にできたと思います。特にTypeScriptと呼ばれる技術が自分にとってはむつかしく感じました。<br><br>しかし自分は 100g.jp を作ることがゴールではなく、個人開発でご飯を食べていきたい。と考えていますから、趣味開発の技術ではなく事業レベルと呼べる実装力は必要だと考えています。<br>（例えばですが自分がつくったものをいつでも売却して問題のないコードになっている状態を想定しています。拡張性がありメンテもそこそこしやすく、スパゲッティコードになっていたり他人がメンテできない形になっていないものです。）<br><br>加えて事業レベルの技術力をまずは身につけてから個人開発しよう！とやっていては時間がかかりすぎます。<br>そうするとどうなるのか？高カロリーな技術選定で作りながら歩みを進めていくしかないな。という判断につながりました。<br></p><h3 id=\"he62e66174e\">愚痴：出来上がったコードを見返すと大したことない気がする悲しさ</h3><p>ここは読み飛ばしてもらって構いません。<br><br>しかしいざ 100g.jp を作りきった後に（といってもまだ途上の途上ですけど）、コードを見直すのですが色々と拙いというかあれだけ苦戦した割に出来上がったコードは単純だななどと思い自分が今まで見ていたものはなんだったんだろう。と思いました。<br><br>ポジティブに言えば成長した証かもしれませんが費やした期間が長いこともあって複雑な気持ちです。<br>というものの 100g.jp で使った技術スタックで自分が必要なものは大体そろったなと思っているのでここからはスピードをかなり上げて開発していこうと思います。<br><br>また、この段階で自分の場合は独学キツイなあと思いました（正確にはリリースの数ヶ月前）。<br><br>自分の場合は事業レベルといえるようなレベルで実装したいと考えています。<br><br>しかし、チーム開発、アーキテクト設計、テスト、抜け落ちている大事な基礎 e.t.c など環境的に無理だったり自分から習得していかないような分野は吸収できないまま。<br><br>そうした不便を感じたので現在は PraHaさんという会社が提供している中級者向けの基礎講座に受講しています。<br>（とはいってもPraHaさんの講座は自主性がほとんどなので今までの独学スタイル今までとあまり変わりません。しかし間違いなくやっておいて良かったなという抜け落ち部分が多くて助かっています。）<br><br>スクールと違い月１万円程度（時期によって変わると思いますし常に募集していません）です。<br></p><h2 id=\"ha214098e44\">まとめ</h2><p>ここまでで「お金をかけずに独学でプログラミングを覚えてWebサービス開発できるようになるまでの手順」は一通り終わりました。<br><br>ここまでの方針をこなせた初学者であれば独学で無料や低コストで見つかる便利なWebサービスや教材を上手に扱っていけるはずです。<br><br>といっても日本語でそうしたサービスを探そうとすると日本のスクールが画一的に書いたような記事ばかり出てきて本当に役にたつ情報に巡り会えないと思います。<br><br>なのでここまで読み終えてくれた人を想定して役に立つサイトや教材、自分の使った所感とともに紹介していきたいと思います。<br></p>",
    "time": "2021-08-10T17:00:00.000Z",
    "thumbnail": {
      "url": "https://images.microcms-assets.io/assets/ae335419fcf84360abab9385ede92248/3482db0125b14a84a265538d56c5c89d/nora5.jpg",
      "height": 271,
      "width": 880
    },
    "slug": "howto",
    "genre": [
      "0yen"
    ],
    "isParent": false
  },
  {
    "id": "da09zq-tpk",
    "createdAt": "2021-08-09T03:29:08.941Z",
    "updatedAt": "2021-08-12T14:31:44.136Z",
    "publishedAt": "2021-08-09T03:29:08.941Z",
    "revisedAt": "2021-08-12T14:31:44.136Z",
    "title": "プログラミング独学で目標に応じた成果物をつくるには【初心者】",
    "body": "<p>「何か作った方が良いといわれたけど自分の作りたいものがわからない」<br>「作りたいものの目処はなんとなく立ってるけどどんな技術を選定したらいいのかわからない」<br>というのが初学者に多い悩みの一つではないでしょうか。実際のところ中堅層になっても自発的に何か作ろう！と考えている人は少ない印象です。<br><br>「何を作れば良いのだろうか」に関するヒントは前回の記事で\"目標を設定する方法\"を通じて目処が立つかと思います。<br><br>この記事では、お金をかけずに独学でプログラミングを覚えてWebサービス開発できるようになるまでの手順における、②を設定する方法を解説します。<br><br>①プログラミングに関する目標を設定する<br><strong>②目標に必要な技術や成果物を調べる</strong><br>③目標に必要な技術や成果物を分解して一つひとつで何か作る<br>④分解した一つひとつで何かを作るという小さな目標のそれぞれで②と③を繰り返す<br>⑤目標に必要な技術を習得して成果物を完成させる<br><br></p><h2 id=\"he661027870\">言語化した目標にふさわしい技術や成果物を考える方法</h2><p>さて、前回の記事で目標を設定することができました。<br><br>前回同様、例として出した一般人アリスは「<strong style=\"background-color:#ffffff\">Webサービス開発をするために就職する</strong>」という抽象的な目標を持っています。（詳細は前回の記事より）<br>プログラミングによって実現したいことNo.1はWebサービス開発で、No.2があわよくば就職もしたいからです。<br><br>そのための実現方法として就職を意識したサービス制作をおこなうことにしました。<br><br>中でも既成のWebサービスを運営している企業へ就職することを手段として選んだわけですが、規制のWebサービスを運営している企業<br>を意識した上で一般人アリスはどのような技術や成果物をつくると良いでしょうか。<br><br>一つのアイデアとしては、既成のWebサービスを運営している企業がよく使う技術の中で自分の好きなWebサービスを個人で作ってみることです。<br>就職は優先順位としては二番目にあるので使用技術は需要のあるものを選びそれ以外は自身が作ってみたかったものを作ると良いでしょう。<br>（※運営者は就職していないので現役で働いている現場の方たちと自分から知り合って信頼を得たら色々とヒントを教えてもらう方法を最もオススメしています。面談よりもストレスが低い方法だと思っています。）<br><br>自身がWebサービス開発をしたい、という気持ちを第一優先としつつそうした就職先の目安となる企業の情報収集はしておきます。<br><br>例えば、Twitterを利用しているエンジニアとエンジニア採用を担当している人事の方が多くいますのでそうした人たちがどういった技術力を応募者に求めているのかたまに発信していたりします。<br></p><h3 id=\"h5d3ca08b00\">ある程度の条件を絞った上での言語の選定方法</h3><p>「既成のWebサービスを運営している企業がよく使う技術の中で自分の好きなWebサービスを個人で作ってみることです。」と先に述べましたがさらにそこから複数の言語の選択肢が出てきました。<br><br>ここからは個人の時間的リソース、プログラミングの興味分野、環境、センスの程度、個人の能力値の違いによってことなることなので画一的な方法で周りの人がベストな言語を決めることは不可能だと考えています。<br>ですが、選定根拠となるある程度は定量的な情報はあります。<br><br><br>・技術的な情報量の多い言語かどうか<br>・必要な学習時間が許容範囲の言語かどうか<br>・フロントエンドで使用件数の多い言語かどうか(フロンエンド希望の人)<br>・バックエンドで使用件数の多い言語かどうか(バックエンド希望の人)<br>・\"希望する業界で\"求人数の多い言語かどうか(就職前提の人)<br>・\"働きたい地域で\"求人数の多い言語化どうか(就職前提の人)<br><br><br>PHPやJavaなどのように使われ始めてからそれなりに時間の経過した言語では経験者も多くいるため人に相談しやすかったりします。<br>相談できる人がいるかどうかも含めてメジャーな言語や技術を選ぶことは無難な選択肢です。<br><br><br>また、定量的だけではなく気持ちの部分となる定性的な選定根拠も大切です。<br><br>・その言語を触っていて楽しいかどうか<br>・興奮するポイントに適切な言語かどうか（見た目が変わることに興奮するならフロントエンドの言語、高度なアルゴリズムに興奮するなら低水準言語に近いCやJavaなどの言語、物を動かすことに興奮するなら組み込み系の言語）<br><br>センスのある人はたまたま得意だからという理由で職業エンジニアをやっていたりする印象です。<br>しかし凡人がプログラミングを続けるコツは\"楽しい\"、\"面白い\"、\"エキサイティング\"を感じるかどうかだと思っていす。<br><br>ある程度、チュートリアルを触ってからしばらく経つと解決できないエラーばかりで頭が禿げそうになる日が訪れるかと思います。<br><br>（自分も何度も禿げそうになりましたが幸いなことに今のところは頭皮がバックエンドしていません）<br><br>しかしそのエラーを倒したときの無双感やエラーのストレスを超える喜びや動機があるからこそ中毒者のように\"もっとやりたい！\"、\"もっといろんな技術を触りたい！\"と四六時中考えていても苦痛ではなく遊びと同等の感覚になるのではないかなと思っています。<br><br>とはいえ最初からこの状態になれなくて当然なので最初はあまり気にしないで今自分が楽しいと感じるようにやれれば良いのではなかと。<br><br>この辺まで抑えたのであればあとはどの言語を選んでも同じだと思います。言語を選んだのであれば他の言語に浮気しないようにしましょう。<br><br>どの言語であっても得意、不得意の分野はあれどやっていることは\"大体同じ\"です。<br><br>しかしその\"大体同じ\"を実装しながら理解するには\"言語が読めて当たり前\"という前提が必要です。<br><br>新しい言語へ浮気するということは改めて\"言語が読めて当たり前\"の状態へ学習しなおさないといけません。<br><br>\"大体同じ\"の部分を学習することが欲しい機能をなんでも実装できるようになるために、他の言語を触ることとなっても応用できるようになるために必要な経験値となります。<br><br>例えばCRUD（クラッド）と呼ばれるほぼ全てのアプリがもっている機能の総称があります。<br><br>これはCreate、Read、Update、Deleteの略称なのですがどの言語であっても実装することの多い機能の一群になります。<br><br>あくまでわかりやすく説明するために言うのですが、新しい言語を覚えてCreateだけできるようになる→言語が合わない気がして<br>他の言語へ浮気して再び文法から覚えなす。<br><br>ということをやっているといつまで経ってもCreateしかできない状態になってしまいます。<br><br>もちろんセンスのある人は例外ですが言語を浮気していいことはあまりないと自分は考えています。<br><br>ちなみに運営者ブラウザ上で手軽に動かすことのできるかと思えば本格的なアプリケーションまで作れる十徳ツールなJavaScriptのことが気に入ったのでJavaScriptを中心に可能な限りは浮気しないことを意識して触っています。<br><br>（特にReactと呼ばれるJavaScriptフレームワークの「一度覚えればどこでも書ける」という考え方が好きです。）<br><br>最近は静的型付けができるようになった背景もありようやく見直しされている言語ですしいまだに技術的な意味での宗派で分岐しまくっている業界です。<br><br>常に変化しているため毛嫌いな人も多いですが自分の場合は変化が楽しいと思えることもありJavaScriptばかり触っています<br>（もっとも正確にはJavaScriptのフレームワークが中心になっています）<br></p><h2 id=\"hf784bc1d15\">作りたいものが決まっている人が制作物を作るためのに</h2><p>先ほどは一般人アリスの「Webサービス開発をするために就職したい」という目標例で就職したい企業のWebサービスにちなんだ言語を選び成果物を作ることについて解説しました。<br><br>しかし最初から「○○なWebサービスが作りたい」という具体化された目標（同時に手段でもある）、「○○のできるWebサービスを作りたい」の場合はどのように成果物の必要な技術をフィルタリングすれば良いでしょうか。<br><br>さて、ここで一般人アリスは「やっぱり就職とかは一旦おいておこう。作りたいものを作りたいだけでした」となったと仮定します。純粋に独学でWebサービスが作りたい。という状態です。<br><br>そして前回の記事で一般人アリスは教育分野に興味があることがわかったので、教育に関する成果物を作ることに決めました。<br>では、さらに深掘りして一般人アリスはどのような教育系のWebサービスの成果物を作るべきでしょうか。<br><br><br>ーーー<br><br>アリスは教育の中でも特に学校教育へ問題意識をもっています。<br>それは「教員が多忙で子どものために使える時間が少なくなってきていること」です。<br><br>そのため「教員の雑務を減らすこと」をやれば教員の子どものために使える時間が増えると仮定して「教員の雑務管理ツール」を作ることに決めました。<br><br>アリスは「教員の雑務管理ツール」に必要な機能を書き出してみることに。計画書作成の機能、問題作成の機能、採点の機能、保護者へのアンケート機能 e.t.c。<br><br>アリスは「実装すべき機能が多すぎるな」と途中で手が止まってしまいます。<br>わからないことがわからない状況なのにこんなにたくさんの機能を一人で作れるのだろうかと。<br><br>ーーー<br><br><br>実際のところその通りで、独学でWebサービスを作るに当たっていきなり複数機能の実装はとてもややこしいものとしてしまいます。<br><br>機能を羅列し、通常は羅列された機能をさらに実装できるレベルまで細分化していきます。<br>そしてどんどん手間が必要であることが見えてきます。<br><br>運営者もまだまだこれからの課題ですがファイルや関数の上手な切り分け、あとで忘れても読み返せるようなコードにすることは１機能をとっても難しいものです。<br><br>初心者が作るにはどれだけ時間が必要なのかわかりません。<br><br>そこで解決法としては個人で作るサービスはとにかく時間がかかってしまうので一番コアとなる一つの機能に絞って実装することです。<br><br>作っていると楽しくなってしまいあれやこれやと機能を追加しがちですが後になってエラー対処やバージョンアップでの不具合、コードの肥大化などメンテで大変になってしまいます。<br><br>何より「ユーザーが何をすれば良いのかわからない」というユーザー体験になってしまい誰でも使えるものでなくなったら本末転倒です。<br><br>運営者も100g.jpというサイトをつくりました人に使ってもらえるのかどうかわからないので「食材の栄養素をフィルタリングできる」と言う１機能だけに特化して今のところは様子見しています。<br><br><br>ーーー<br><br>アリスは複数機能をもつサービスより１つの機能に実装を特化することに決めました。宿題管理ツールです。<br><br>センター試験でもマークシートを使っているようにすでに問題の丸つけの自動化は普及しています。<br><br>「じゃあ先生が作った問題もセンター試験と同じように自動で採点できるようにしたら良いんじゃないのかな」とアリスは考えました。<br><br>一方でまだPCやスマホが子どもや保護者に十分に行き渡っていない中でコンピューターを全員が使える前提で作ることはできません。<br><br>またマークシートのように専用の読み取り機械を作るのも大袈裟であるし、スマホでAI（機械学習）を使ったアプリを作るのも個人で作るには手間がかかりすぎそうです。<br><br>そこで宿題管理ツール上で先生が作成した問題は紙で印刷する形式でプリントもできるし、電子上でも回答できる形式になるよう作ることにしました。<br><br>プリントが必要な人とそうでない人とで事前にチェックして電子上で問題回答できる人はメールで問題文を送るようにします。<br><br>また問題文において自動化しづらいところ、例えば国語の人によって回答が異なる部分や数学の計算する過程を特にみたい部分に関しては一気に実装が難しくなるので部分的に自動採点をあえてしないオプションを先生が選べる形式で作ってみることにしました。<br><br><br>ーーー<br><br>といった形で教育関係のWebサービスとして宿題管理ツールを作ることを決めていきます。<br><br>（※なお上の例は運営者が適当に考えていることなのでアイデアは参考にしないよう注意してください）<br><br></p><h2 id=\"h46da3cc35e\">\"作りたいもの\"で悩んでいる人はその思考を捨てる</h2><p>（すでに決まってる人は無視してください）<br><br>一般人アリスの宿題管理ツールの例を出しましたがなかなか実際に作りたいものとは思い浮かばないものです。<br><br>過去にIT勉強会に関わるバイトやオンライン、オフライン問わず幾つかのコミュニティを通じて色々なエンジニアの人と知り合いになったことがあります。<br>そのなかで現役のエンジニアであっても「これを作りたいんだ！」と意気込み作っている人は全体の１割もいない印象です。<br><br>過去にポートフォリオもくもく会というものを開催したことがありますが仕事の具体的な問題に取り組むことはあっても仕事と切り離したところでまとまった制作物を作ろうという人は自分以外にいませんでした。<br><br>\"作りたいもの\"というのは普段からさまざまなトピックに問題意識を持ちそれにちなんだ解決策から具体的な実現策を考えることに慣れている、もしくはよっぽど対象に関して執着や愛情、思い入れがないとなかなか湧き出てこないものかもしれません。<br><br>日本の学校ではそうした思考のフレームワーク教育もありませんでしたのである意味では仕方のないことです。<br><br>そのため\"作りたいもの\"という発想はいったん捨て去り、\"作るべきもの\"を消去法でフィルタリングして浮き彫りにしてく方向性を提案します。<br><br>先ほど、エンジニアであっても作りたいものがある人は少ないと言いましたが、実際のところたくさんの小さな機能を自発的に作っている方がたくさんいます（のはずだと思っていますが現役の方からするとどうでしょうか）。<br><br>例えば仕事で出くわした技術を解決するために一度プロダクトとは切り分けて解決するためのダミーアプリを別に作ってみたり、触ったことのない言語をやる上でチュートリアルをやってそれから少しチュートリアルをいじってみて挙動を覚えたりして細かく\"作るべきもの\"を作っています。<br><br>これは\"仕事で使う技術\"というフィルタリングがされているので砂漠の中から宝石を見つけるようなことをせずとも簡単に\"作るべきもの\"が見つかっていると言えます。<br><br>同様に目標がある程度は定まっているのであればそれに即した成果物を作れば良いです。<br>（目標を言語化できていない人は前回のページで言語化する方法を載せているので参考にどうぞ。）<br></p><h3 id=\"h1d9ea10883\">就職をする上で作るべきものの方針</h3><p>（※運営者は就職していません。就職したい業界で実際に働いている現役の人と仲良くなってヒントをもらう方法がお勧めです。面談のストレスに比べれば余裕かと。）<br><br>面談したい会社が自社サービス開発会社であれば運営しているWebサービスサイトに近いもの、もしくは使用されている技術を使って意識したものを作ります。<br>作った行為そのものが面談アピールにもなりますし他会社にも活かせる成果物も同時に作れます。<br>（Wappalyzerと呼ばれるChrome拡張機能を使えばサイトに使われている技術がある程度わかります）<br><br>Twitterなどで人事や面談をしている人がたまに採用したいエンジニア像のような発信をしていることがあるので参考にして作ってみるのもありかと。<br><br>\"スクールや誰かの指示で作らされたような成果物\"はマイナスの印象を与える可能性もあるので注意です。０から完成まで自走したことの方が評価されやすいためかと思われます。<br><br>会社によってはプログラミングの基礎力がそこそこあることを証明できればよくて\"問題を起こさない従業員になるかどうか\"の方を重要視していたり\"教育できる若さ\"、\"プログラミング以外のプラスアルファの要素\"を重視したりします。<br><br>そのようなケースでは成果物を気合入れて作るより先に最低限学んだら就活した方が効率が良さそうです。<br><br>プログラミングと一言でいっても業界によって求められる人物像も大きく異なるためあっちやこっちへと散弾銃のように就活する方法より業界を絞ってモリを突き刺す気持ちで成果物を特化させて就活した方が関係者がみなハッピーになりやすい気がしますがあなたが採用する側だった場合はどう感じるでしょうか。<br></p><h3 id=\"h5ee60b76e2\">Webサービス x ○○ のような組み合わせで何か作りたいがアイデアがない人の作るべきものの方針</h3><p>作りながら見えてきたものを作ると良いかと思います。<br>はい、「作りたいものがないのに作りながらってどういうこと？」というご指摘はまさにその通りです。<br><br>では逆に考えてみましょう。読者のあなたには作りたいものが既にあると仮定します。<br>ですがそもそもそれをあなたが実装することはできるのでしょうか。個人でやれる範囲を超えている可能性はありませんか？<br><br>たまにいきなり実装できてしまう例外的な人はいますがほとんどの人は実装できないはず。<br><br>次のページで解説しますが実装するために必要な技術や成果物は分解して考えると作り方が見えてきます。<br><br>例えば、SNSを作るということはすなわち「ユーザー登録・退会の機能」「投稿機能」「コメント削除機能」「ユーザー管理画面」などを問題ないように組み合わせて作る。<br><br>ということと同じ意味であり、これらを単体で実装できないのであれば組み合わせて実装することはもっとできない。ということになります。<br><br>大雑把に「恋愛系のSNSを作りたい」と的を絞ったとしても結局のところ分解した一つ一つの機能や関数を実装できる能力が必要になります。<br>そして初学者ほど作りながらでないと見えてこないところでもあります。<br><br>一つ一つの機能を実装する過程でより具体的な実現可能なSNS像が見えてくるはずで、その段階で作りたいものの明確化をしても遅くはありません。<br><br>むしろ実現できない大風呂敷を広げてしまって損失回避のために執着して長い時間をかけて作ったものの誰にも使われないものを作ってしまうことになるよりかは最初から具体的なアイデアがない方が全然良いことだと思います。<br></p><h3 id=\"heb778052ca\">アイデアを無理やり思いつこうとする弊害</h3><p>自分はアイデア帳なるものがあって着想を得たらすぐにメモるようにしています。おそらくここ７、８年は習慣的につけている気がします<br>（もっとも実際に形にできたものはほんの少しです。外注などもお願いできるくらい余裕が出てくれば回収できる...はず！）<br><br>メモをつけ始めた初期の頃は\"無理やり思いつこうとして思いついたアイデア\"がたくさん溜まりました。<br>しかし\"無理やり思いつこうとして思いついたアイデア\"は時間が経つとどうでも良くなることに気がつきました。<br><br>なぜどうでも良くなったのかというと\"無理やり思いつこうとして思いついたアイデア\"は思い入れや愛情、必要性などから切り離されているからだと思います。<br><br>そうした思い入れのないアイデアに時間をかけて執着すると辛くなったときに開発で粘れなくなってしまうのではないかなと思います。これはアイデアを無理やり思いつこうとする弊害だなと。<br><br><br>// 良いアイデアを思い浮かぶコツみたいな記事に回す？<br>逆に日常生活をしていて\"なんでこれがないんだよ〜\"とか\"これは問題だな\"、\"これがあったらもっと楽なんだけどなあ\"と感じることが出てきて瞬発的に○○みたいなの作れば解決できるかな？！というアイデアが勝手に降りてくることがあります。<br><br>このように脊髄反射のような形で自然に出てきたアイデアの方が思いついてから時間が経っても隙あらば作りたいな。と感じます。<br><br>「野良開発のススメ」も同じように\"エンジニアの人たちが初学者向けプログラミングの情報商材に非難や皮肉を浴びせるだけ\"で人生を純粋によりよくしたいだけの初心者に不穏な気持ちだけを残している気がして良い気持ちにならないな。<br><br>普通にやり方が間違っていると指摘するのであれば体系立ててエンジニアになれる方法を教えてあげればよいのに。ということでそれにちなんだブログを作ってみようかな。<br><br>というアイデアが勝手に降りてきたのでNextJSと呼ばれるフレームワークを勉強ついでに使いたかったこともあり作ってみたサイトです。<br><br>（もっとも運営者は就職していないものの現役でやってる人がいないなと思ったので勝手にやってます。）<br><br>個人開発者の中でもマネタイズにうまくいっているタイプの方は\"自分が使いたいもの\"をひたすら改善を繰り返していっています。<br>ある程度は情を注げるものでないとアウトプットしたところで継続することは難しいかもしれません。<br>（最もマーケターのように数字の変化そのものに好奇心があるタイプであれば制作物に情がなくても問題ないかもしれません）<br><br>開発規模は変わりますが価格.comという有名なサイトのCEOも同じように\"自分が感じた疑問\"ベースでサイトを作ったと言います。<br></p><h3 id=\"heb822665b0\">アイデアの引き出しを増やす方法</h3><p>しかしそんなことを言っても「とにかく時間がないから早くアイデアが必要だ」という人も中にはいることでしょう。<br><br>そうした場合はアイデア出しのフレームワークや、アイデアを出すための思考法というものは世の中に多いためそれらを活用すると良いかもしれません。<br><br>中でも習得に必要な時間が短く誰でにも使えるものがあります。マンダラートです。<br>マンダラートとは正方形になるように並んだ９マスの正方形の中心にお題を書いて残り８マスには連想するものを書いていく→さらに８マスに記載した内容を次のお題として中央に添えて残り８マスを再び埋めていく。<br><br>といった連想させてさらに無理やり８つのアイデアを引っ張るためのアイデアツールです。<br><br>この記事では割愛しますが他にも、マインドマップ、デザインリサーチなど様々なアイデア出しに役立つツールや思考法があります。<br>（アイデア出しの記事を準備中）<br></p><h2 id=\"ha214098e44\">まとめ</h2><p>さて作りたいものが決まったのであれば次は作りたいものを実際に作るために必要な工程について解説します。　</p>",
    "time": "2021-08-08T17:00:00.000Z",
    "thumbnail": {
      "url": "https://images.microcms-assets.io/assets/ae335419fcf84360abab9385ede92248/087015af209b42ba8d92477d6ba6c242/nora4.jpg",
      "height": 271,
      "width": 880
    },
    "slug": "portofolio",
    "genre": [
      "0yen"
    ],
    "isParent": false
  },
  {
    "id": "nomj-5uoeqh",
    "createdAt": "2021-08-07T16:26:45.846Z",
    "updatedAt": "2021-08-12T14:29:00.797Z",
    "publishedAt": "2021-08-07T16:26:45.846Z",
    "revisedAt": "2021-08-12T14:29:00.797Z",
    "title": "プログラミングに必要な英語力はリーディング【便利ツール紹介】",
    "body": "<p>「プログラミングをやっていて英語って必要なの？」<br><br>という疑問に関して、フロントエンドで日本語がほぼ存在しないエラーなどは英語で検索して解決せざるを得なかった経験からすると\"読まざるを得ない\"ということが結論です。<br><br>しかし一言で英語といっても「リスニング力」「スピーキング力」「ライティング力」「リーディング力」に大別できますが開発に必要な力は１０のうち「リーディング力」が７、「ライティング力」が２、「リスニング力」が１程度でしょうか。<br><br>自分の周りで見るエンジニアで国際派な日本人はかなり少数の印象です。<br>海外旅行もあまりいったことがないという方も少なくありません。<br><br>「野良開発のススメ」は初学者が独学でWebサービス開発ができるようになるために英語のリソースへ積極的に触れることに賛成です。<br></p>",
    "time": "2021-08-06T17:00:00.000Z",
    "thumbnail": {
      "url": "https://images.microcms-assets.io/assets/ae335419fcf84360abab9385ede92248/cf46bb154b69400790f94c54983671ab/nora10.jpg",
      "height": 271,
      "width": 880
    },
    "slug": "en",
    "genre": [
      "english"
    ],
    "isParent": true
  },
  {
    "id": "o9n09799-znb",
    "createdAt": "2021-08-05T18:18:10.923Z",
    "updatedAt": "2021-08-12T14:30:59.760Z",
    "publishedAt": "2021-08-05T18:18:10.923Z",
    "revisedAt": "2021-08-12T14:30:59.760Z",
    "title": "プログラミングの独学者に必要な目標設定とは【設定方法まで】",
    "description": "メニューには ① プログラミングに関する目標を設定する",
    "body": "<p>この記事では、独学する人に目標設定がマストな理由から実際に目標設定をする方法を自身の体験ベースも交えつつ記述してみました。<br><br>さて、プログラミングの独学だけでWebサービス開発までできるようになりたい人に目標設定はほぼマストだと考えています。<br><br>理由<br>・目標に応じて同じ題材であっても作るべき成果物の中身がまるっきり違うものとなる可能性があるため<br>・目標に応じて必要なツールや教材、学習の深度が異なってくるため<br>・目標に応じて独学が不適切な場合があるため<br><br>このように目標で必要なものが異なるため目標が不在であると効率的な独学が困難となります。<br>享楽的にプログラミングを楽しむだけや時間がたっぷりあるなら悠々自適にはじめてみるべきですが、プログラミングの独学で何らかのアクションを起こしていきたい人は必要です。<br><br>特にWebサービスを独学で作れるようになりたい人は「自分が欲しいから作ってみたい」のか「就職したいから作ってみたい」のかでしっかり区分けすべきです。<br>目標によってはそもそも成果物をつくる必要さえないでしょう（例：第二新卒の枠を狙って就職する、自身の悩みを解決するWebサービスが既にある）<br><br>またサービス開発は要点を抑えないととにかく時間が溶けていきます（運営者は技術力がないせいで溶かしまくりました）。<br>もちろん時間に余裕があれば別です。<br>ただあわよくば就職したいなあ。と思っているのであれば面談してくれる人事を想定して機能を実装した方が効率的です。<br><br>この記事では、お金をかけずに独学でプログラミングを覚えてWebサービス開発できるようになるまでの手順における、①を設定する方法を解説します。<br><strong>①プログラミングに関する目標を設定する</strong><br>②目標に必要な技術や成果物を調べる<br>③目標に必要な技術や成果物を分解して一つひとつで何か作る<br>④分解した一つひとつで何かを作るという小さな目標のそれぞれで②と③を繰り返す<br>⑤目標に必要な技術を習得して成果物を完成させる<br></p><h2 id=\"ha0b3d9e545\">目標を設定するためのステップ</h2><p>自前の思考整理ツールを持っていない人はマインドマップを使ってみることをお勧めします。<br><br>①プログラミングを通じて実現したいことを箇条書きにする<br>②優先順位を決める<br>③優先順位の高い順に応じて目標を言語化する<br></p><h3 id=\"hbe32384633\">※初学者レベル４以降を前提にしています</h3><p>\"初学者\"とは主語の大きい言葉です。<br>一般的にこれ以上、分解して捉えたりする言葉ではないため仕方がありません。<br><br>しかし、パソコンが操作できない人からスマホアプリをリリースした人、未経験から会社に入社してから１年前後の人まで初学者（駆け出しエンジニア）としてだいたい同じ言葉で表現されますがレベルの差は明らかです。<br><br><br>運営者の偏見による初学者レベル<br><br>初学者レベル１ パソコンの基本的な操作ができない<br>初学者レベル２ パソコンの基本的な操作はできるがコードを書いたことがない<br>初学者レベル３ 何かしらのコードを書いたことが少しだけある（おおよそ１００時間未満）<br>初学者レベル４ 何かしらのコードを書いたことがある（おおよそ１００時間以上）<br>初学者レベル５ 簡易的なサイト制作やオリジナルの小さな機能を模写ではなく７割程度は自力で作ったことがある<br>初学者レベル６ 技術的な問題を誰かに質問できる（わからないことがわかる）<br>初学者レベル７ 簡易的な技術記事を書くことができる（学んだ範囲で人に教えることができる）<br>e.t.c.....<br><br><br>初学者レベル６やレベル７あたりは賛否両論あるかもしれません。<br><br>しかし、基本的に付き添いの先輩のいない悪い環境から独学でWebサービスを作るような道を進みたい人は個人完結で「わからないことがわかる」ことを質問サイトで証明できますし、「先生になれる」ことを技術記事の投稿で証明できます。<br>個人で環境の悪さを補う方法はそんなにありませんのでレベル６やレベル７の能力は初学者レベルにも最低限必要だと考えます。<br><br>運営者自身はというと技術記事をどう書いていいのか全くわからない時期は質問サイト（主にteratail）のテンプレートを使って質問して技術的なことを文章化することに慣れて、それから技術記事を書けるようになりました。<br><br>そして技術記事を書くと後輩に教えることなく人に教えた経験値として理解が進みます。<br><br>さて初学者レベルとは別にプログラミング力に関して大きく影響を及ぼす個人差のポイントがあります。<br><br>・個人差の大きな要素<br>学習能力の高さ、論理的思考力、読解力、リサーチ力、情報リテラシーの高さ、才能、コンピューター関連の知識の有無など<br><br>これらに関してはなかなか定量化のできない能力でなんとも言えませんが、理系大学卒の人の他に受験勉強が得意なタイプの人や何か一つのことをディープに追求したことのある人は比較的にプログラミングの習得スピードもそれなりの印象です。<br><br>また、天才プログラマー１人で凡人１００人並みの戦闘力（生産性）がある、といわれる世界でもあるため常人の数十倍を超えて習得スピードのある人ももちろんいますがそうした方は「野良開発のススメ」の読者としては想定していません。<br><br>学習能力の高さが有利に働くことはもちろんですし他の能力も言わずもがなかと思います。ただし一つ、読解力は意外だったかもしれませんが読解力もとても大切であると日々痛感しています。<br><br>運営者自身もまだまだ能力不足を感じていますがドキュメントやエラー内容をよく読んで理解して解決策の目処を立てる能力は読解力が要求されます。<br><br>一次情報になるほど正しいことが書かれていますが書かれている内容は難しいですよね？例えば論文など。<br><br>あくまでわかりやすくするためですが極端な話、法律について調べたいときにネット記事と六法全書をあたるのとで必要な読解力の差はあきらかです。<br>そして六法全書を読めた方が早く正解に辿り着けます。<br><br>Web開発においても使う技術に関する問題は一次に近い情報へまず当たることを基本的なググリ（Google検索）の姿勢とされており読解力がある程度は必要です。<br>もともと備わっている人は実装スピードが早くなりますしそうでない場合は実装することを通じて少しずつ身につけていくしかありません。<br>（就職する場合は就職先で仕様書を読み込む力が必要）<br><br>いずれにしても初学者レベル４未満の人は１００時間（１日２〜３時間の学習で１ヶ月少し〜２ヶ月程度）は触ってみて続けられることがどうかを確かめるのをオススメします。<br>１００時間あれば流石に雰囲気が少しわかる位にはなれるかと。<br><br>知人でスクールに通ってみたもののパソコンの画面をずっと眺め続けることがニガテだと分かったという人もいます。<br><br>なんでもそうですが学び始めが一番フレッシュで楽しく気持ちもたがぶっているものです。<br>問題はその先の成長曲線がなかなか上がらずしんどい時期も含めて継続できるかどうかです。<br><br>お試しの１００時間ほどでしんどくなったのであれば休憩を入れてみて、それでも触りたくなくなったのであれば仕事してからもしんどくなるかもしれないので今後については要検討するべきかと。<br>（その１００時間とやらはどこに時間を当てれば良いのか、に関しては後ほど解説）<br><br>目標以前に、本当に右も左もわからない。という人がいて「○○のサービスを作ってやろう」と思ってもわからないことが全くわからず、ぼんやりしてしまうかと思います。<br>したがって下のレベル３までの段階の人までは目標設定などそれ以前にまずはプログラミング自体になんでも良いので触れてみることをお勧めします。<br><br>運営者は海外に滞在している期間がそこそこ長いのですが海外移住したい国があるのにその国へ行ったことがない（ましてや海外旅行もほとんど未経験）、という人が少なくありません。<br>恋に恋するではありませんが、現実に触れてみる前から夢だけ膨らまし過ぎると期待ハズレだった時に関わったみんながあまり嬉しくない結果になりがちです。<br></p><h2 id=\"h3b8d1ac22d\">①プログラミングを通じて実現したいことを箇条書きにする</h2><p><img src=\"https://images.microcms-assets.io/assets/ae335419fcf84360abab9385ede92248/8d906a2b04ea47deb3bd45f030d8435a/goal-ex1.jpg\" alt=\"\"><br>大抵の人はなかなか思いつかないかもしれません。<br>すぐに思いつかないような中でガチガチに決めても途中で気持ちが変わることは誰しもあるものです。<br><br>むしろ時間をかけてガチガチに決めてしまったが故に目標に縛れてしまう可能性もあります。<br><br>途中でやりたいことが変わっても良いので気楽な気持ちで何か書いてみましょう。<br><br>詳細度は超具体的なものから抽象的なものまで気にしなくて大丈夫です。重複してそうな内容でも後から整理すれば問題ないので書き連ねてみてください。<br></p><h2 id=\"h35a831e688\">②優先順位を決める</h2><p><img src=\"https://images.microcms-assets.io/assets/ae335419fcf84360abab9385ede92248/22d3a4223efb4d59b0f6c3789f8af5bb/gola-ex3-2.jpg\" alt=\"\"><br>優先順位を決めてみてください（箇条書きが１つしかない場合は覗く）。<br>画像は運営者の場合です。だいたいの精度で書いています。<br><br>「優劣を決めれない」という場合は画像のように\"なぜ\"を２回ほど深掘りにして欲求の解像度を高めてみてください。<br><br>「重複している内容があってどうすれば良いのかわからない」という場合は\"より抽象的な内容\"を上位においてみてください。<br><br>画像例として自分のものを挙げてみました。<br>ですがこれまでの知り合った人と比べて自分のように作りたいものがある程度は目処がついている人は少数派です。<br>ということで一般人アリスを想定して一例として出してみました。<br><br><img src=\"https://images.microcms-assets.io/assets/ae335419fcf84360abab9385ede92248/5758b8dcec904cfaa8254a37bea0c34d/goal-ex4-2.jpg\" alt=\"\"><br></p><h2 id=\"h1a001f5caf\">③優先順位の高い順に応じた目標の言語化をする</h2><p><br>さて、<strong>一番はWebサービス開発をしたい</strong>が<strong>二番目に就職もあわよくばしたい</strong>という一般人アリスの目標を言語化するのであれば「<strong>Webサービス開発をするために就職する</strong>」ではないでしょうか。<br>開発ファーストだけどそのための手段として必要だから就職を選んでいますというスタンスです。（あくまで一例です）<br><br>成果物としての題材は実現したいことの四番目にある教育に関わりたい、ということから教育関係のWebサービスなどは良いのではないでしょうか。<br><br>五番目のAIを使ったアプリを題材にしないのか、に関してはAIはPythonがメインとなります。<br><br>しかし未経験がPythonで就職するならアカデミアの分野にいるような人でないと難しい印象です。実現したいことの二番目にある就職とは少しケンカしてしまいます。<br>（もちろん例外はあると思いますが効率は悪くなると思います。またライブラリを少し使ったサーバーを立てる程度であれば問題ないかと）<br><br>さて教育関係のWebサービスを作ってみる場合、時間に余裕があればあまり就職を意識しすぎず個人開発をすると良いです。<br>その際に悩んで手が動かなくなるようでしたら無視して良いですが、どうしてそれを作ったのか、実装の中でどうしてそのコードを書いたのか、なぜその技術を選んだのか、などまで説明できるとより良いです。<br>ベンチャーなどに関わりたいのであればビジネスサイドも意識していると評価してくれる人事もそれなりにいることでしょう。<br><br>ですが時間がない場合は先に就職優先の成果物をつくってチャレンジしてみると良いかと思います。<br>一般人アリスの場合、教育系のベンチャー企業でWebサービス運営しているところなどが目安でしょうか。<br><br>日本人はワーカホリックがデフォルトであることとプログラミングは一部の才能ある人を除いて腰を据えて取り組まないと身にならないため就職を見越した方が一般人アリスのケースでは無難になりそうです。<br>（※ちなみに運営者は就職していないのでこの点については勝手なことをいっています）<br><br>本当はニートになって作りたいように作る方が結果として遠回りでも面白いものは作れるだろうけどなーとは思いますが。<br><br>では一般人アリスはどの言語選定をすれば良いでしょうか。<br><br>まず初学者が「Webサービス開発をしたい」を満たす方法に何があるでしょうか。<br>・技術者のいないWebサービスを提供する予定のベンチャー企業に飛び込んで０から開発する<br>・個人開発する<br>・既成のWebサービスを運営している企業に就職する<br>・新規開発メインの部署があるSES企業へ就職する<br>・趣味でチーム開発している人たちの中に混ぜてもらう<br><br>就職のしやすさはいったん横に置いて就職もしたい、を同時に満たせるものに絞ると<br><strong>・技術者のいないWebサービスを提供する予定のベンチャー企業に飛び込んで０から開発する</strong><br><s>・個人開発する</s><br><strong>・既成のWebサービスを運営している企業に就職する</strong><br><strong>・新規開発メインの部署があるSES企業へ就職する</strong><br><s>・趣味でチーム開発している人たちの中に混ぜてもらう</s><br>上の３つが同時に実現したいことを満たせる要件に近いのではないでしょうか。<br><br>就職のしやすさは別として、Webサービスを開発できてかつ就職もできる選択肢になるからです。<br><br>中でも、「既成のWebサービスを運営している企業」の使っている技術を調べてみてください。<br>おそらく Ruby や PHP、JavaScriptのフレームワーク e.t.c を使った会社なども多く見つかるかと思います。<br>スマホアプリであれば最近はFlutterと呼ばれる言語の需要が高まっている印象です（トレンドもあるので自身でリアルタイムの結果を調べてみてください）<br><br>すると上記のもので自身が興味を持った言語で習得すると良いかと思います。<br><br>学習時間がとにかくないのであればPHP、しっかり時間をとって取り組むならRuby、フロントエンドに取り組みたいならJavaScriptのフレームワーク、スマホアプリをつくるならFlutterと自身の興味や状況に応じて絞ることができるようになります。<br><br>大変ですが一度覚えることができれば間違いないのは一つの言語で大抵のことはできてしまうと言われるRuby（Ruby on Rails）です。<br>運営者の場合は見た目の操作を色々できて楽しかったこともあり楽しさ重視でJavaScriptを中心として開発を進めました。<br>どちらも個人開発ではよく使われる言語です。<br><br>楽しいと思えるかどうかは長期戦でかなり重要な要素です。<br>楽しさ重視でずっと遠回りしていましたがそのおかげで１日中コードのことを考えていても苦に感じません。<br><br>次のページでは技術や成果物として何を作るべきかと、技術要件について目処をつける方法を解説します。<br><br>// 別記事のネタにする<br>個人開発を除いて未経験者が簡単に食らいつける業界というのはなかなかありません。（会社を選べばなければ別ですが潰されるリスクがある）<br><br>運営者は就職経験はないのでこの点に関して伝えられることはないのですが、正攻法は実際にその現場で実際に働いている知り合いを作ってアドバイスしてもらえるくらいに信頼関係をきずける付き合いをすることです。<br><br>ネットのインフルエンサーの人たちの耳障りの良い話と現場の人間の生々しい話をぜひ比べてみると良いかと思います。<br>（0から10まで教えてクレクレ君にならずにイベントに何度も顔を出して少しずつ教えてもらい自分の話を聞いてもらうなどすると良いかと思います）。<br><br>エンジニアの業界は勉強会が他の業種よりも盛んでオフライン・オンラインともにたくさんあります。<br>なぜかといえば土日もずっと技術のことを考えている人は少なくないためイベント開催する人も自ずと多いためです。<br>（それが仕事でもあり趣味でもあるため土日も遊んでいるのと同じ感覚で学習している）<br><br>運営者もかつてとある子会社の若手向けIT勉強会を開催している会社でアルバイトとして勉強会の準備および司会進行をしていたことがありますが平日の仕事終わりの夜にわざわざ勉強会で新しい技術を身につけようとたくさんの人が集まっていました。<br><br>決して前に出るのが得意なタイプではなさそうな人でもアウトプットをするために講師側に回ったり、その逆も然りといった感じです。<br>業界によっては信じられないほど勉強熱心にうつるかと思いますがそうした人たちと仲良くなるのも手です。<br>（悩んでいる人を狙ったマルチ商法へ勧誘する人たちもごくごく稀にですが混じっているので若い人は特にご注意）<br></p><h2 id=\"hcf83e1357e\"><br></h2><p><br></p>",
    "time": "2021-07-31T18:00:00.000Z",
    "thumbnail": {
      "url": "https://images.microcms-assets.io/assets/ae335419fcf84360abab9385ede92248/3ddd9679f32c400cbb4069c3749f1e47/nora2.jpg",
      "height": 271,
      "width": 880
    },
    "slug": "goal",
    "genre": [
      "0yen"
    ],
    "isParent": false
  },
  {
    "id": "wtg-0yosqu-d",
    "createdAt": "2021-08-05T06:39:55.152Z",
    "updatedAt": "2021-08-05T06:39:55.152Z",
    "publishedAt": "2021-08-05T06:39:55.152Z",
    "revisedAt": "2021-08-05T06:39:55.152Z",
    "title": "野生の個人開発者がプログラミングの独学に使ってきたサイト",
    "description": "テスト",
    "body": "<p>テスト</p>",
    "time": "2021-08-04T17:00:00.000Z",
    "slug": "learn",
    "genre": [
      "0yen"
    ],
    "isParent": false
  },
  {
    "id": "mgzj1b6xx",
    "createdAt": "2021-08-01T15:02:17.356Z",
    "updatedAt": "2021-08-13T05:05:12.624Z",
    "publishedAt": "2021-08-01T15:15:22.268Z",
    "revisedAt": "2021-08-13T05:05:12.624Z",
    "title": "お金をかけずに独学でプログラミングを覚えてWebサービス開発できるようになるまでの手順",
    "body": "<p>個人開発をなりわいにするためWebサービス開発を独学でできるようになったあきふみです。<br><br>このサイトは<strong>「いずれ自分の好きなWebサービスを作ってみたいからプログラミングを独学で始めたいけど何から手をつけていいのかわからない」</strong>と悩んでいる人へ向けて自分の数年間の独学における実践経験に基づいて0から制作してみたサイトです。<br><br><strong style=\"background-color:#58b5cf\">結論からいえば独学だけで好きなWebサービスを開発できるようにはなれます。</strong>とうぜん学習費用だって低く抑えられますが、\"ただし\"がいろいろつくのでそれは追々の解説です。<br>現に運営者自身が独学でただ作って終わりのものではなく拡張性とメンテナンス性を意識しながら開発ができるようになりました。<br><br>（正確にはその入り口に立てたくらいなので使いこなせているわけではないためまだ道なかばです。とはいえ今のレベル感だからこそ伝えられる初学者へのヒントがあると思い情報をまとめています。）<br><br>プログラミングの世界では、実装方法や学習コンテンツに関しては樹海の森のようにあたり一面に生い茂っていますがそれらを自身に合った形で編集して上手に活かすことに関しては情報が不足していると感じます。<br>「野良開発のススメ」では学習の方針の決め方をメインにまとまった情報との上手な付き合い方を一独学者という立場として解説してみました。<br><br><strong>「野良開発のススメ」の記事を一通り読むことで数年前の僕と同じようにネットに溢れている情報の中から自身にあった手法を選んで低コストで効果的な独習をしていけるようになる</strong>ことを目指しています。<br><br>ちまたに溢れている情報はかなり交錯していて、独学でもプログラミングができるよという声もあれば、独学のプログラミングの挫折率は９割以上だからコーチングをつけてもらった方が良い。<br><br>とかあっちこっちの情報だらけで困ってしまっても仕方がない状況だなと感じています。<br>それに追い討ちをかけるではありませんが、エンジニアさんは職人気質でこだわりを持つ人も多いため１８０度異なる意見が同じ技術感の人たちからも出やすかっりするのも一要因だったりすると考えます。<br><br>その上お互いのコードをレビューし批判する文化があること、コードを通じたコミュニケーションという一般的ではない意思疎通をしていることもあってかトゲのある主張がネットで散見されやすくなっています。<br>（そうした内容について関連リンクを貼る）<br>（おすすめの書籍、エンジニアの習性がわかる本を貼る）<br><br>ところで自分は特段、もの覚えがいいとかプログラミングの才能があったわけではありません。<br>むしろエンジニアを目指す層はインテリな方も多く、そうした方と比べたら効率の良いインプットができませんでした。おそらくアルゴリズム力や読解力、吸収スピードなどは相対的に悪いことでしょう。<br><br>それだけでなく技術記事のプラットフォーム（QiitaやZenn）などで１年のプログラミング経験で自分にも真似できない技術力を持っている２０歳に届くかどうかも怪しいような人たちもよく散見します。<br><br>ただし情報を取捨選択して自身に必要なものを選んで利用してそれを上手く利用するということに関してだけはメディアやECサイトを運営して何かしらのリサーチを何年も続けていたこともあり人並み以上には経験値がありました。<br>そのおかげで独学でサービス開発までできるようになったのかなと考えています。<br><br>「でも私にはそんな経験はないよ」という方が一般的です。<br><br>しかしプログラミング独学に必要な情報を取捨選択する方法というものはある程度は文章化することができますし再現性のあることですので読者にとって問題ではありません。<br>そこで情報が溢れているプログラミング初心者向けの情報に関しても自分なりの強みでもってして手順をまとめてみました。<br><br>// aboutページへのリンクを飛ばす<br>ところでお前は何者やねん。というところですが、<br><br>直近では 100g.jp と呼ばれる栄養系のサイトを１年ほどかけて少しずつ作りました。（使用した技術スタック：GatsbyJS, TypeScript, Firebase, microCMSなど）<br><br>職種としてのエンジニアではないため完全に野良開発です。<br>個人開発ドリームを体現したくて小規模ながら事業と呼んでも良いレベルに大きくさせていきたいのですがまずはご飯を個人開発だけでもぐもぐできるようになることを目下の目標としています。<br><br>それ以前には業務で小さなレベルの自動化をやったりJavaScriptだけで作った機能付きページをメディアに掲載したり、サーバーを使ったChrome拡張機能を開発したり、遊びでPHPでアプリ作りやPythonで簡単な統計つくったりとちょこまかとではありますがプログラミング自体は長らく続けていました。<br><br>このサイトを作った理由や目的は複数あります<br>・NextJSの学習用<br>・初学者に対する業界人の反応による問題意識と自分なりの解答<br>・独学者には後輩がいないためバーチャル後輩を想定することでバーチャル教育マンになりたい<br>・独学者は多いもののどこかしらの段階で就職する人が多数のため２年以上の単位で独学を継続していた人の発信をあまりみないため発信価値があると思った<br><br>(詳細はこちら)<br></p><h2 id=\"h2a47d688bd\">初心者がWebサービス開発まで独学でできるようになるまでの大まかな手順</h2><p>「野良開発のススメ」は大枠では下の手順に沿って記事を用意しています。下の手順をやっていくことで\"欲しいものがつくれる開発者としての基本的な力\"も身についてくるはずです。<br><br>①プログラミングに関する目標を設定する（例：○○なSNSを好奇心で作りたい、仕事で使うxxのアプリを実装したいといったことなど。それらに限らず就職するためにWebサービスを作りたい、趣味でプログラミングを始めたい、仕事で解決したい問題がピンポイントにある、なども当てはめることができる）<br>②目標に必要な技術や成果物を調べる<br>③目標に必要な技術や成果物を分解して一つひとつで何か作る<br>④分解した一つひとつで何かを作るという小さな目標のそれぞれで②と③を繰り返す（目標が大きなほど必要な繰り返しの回数は増えるかと）<br>⑤目標に必要な技術を習得して成果物を完成させる<br><br>後ほど順を追って解説します。あくまでWebサービス開発まで独学でできるようになるための比較的に便利な手順であって享楽的にプログラミングをやりたいだけの人には向かない手法です。<br><br>情報の取捨選択において目標があることは方位磁石となりますので大前提です。<br>例えば「同じWebサービスをつくる」であっても就職するためのWebサービスと個人開発としてのWebサービスでは力を入れるべき実装ポイントが異なるからです。<br><br>詳細は次ページでもある ①プログラミングに関する目標を設定する に記載しました。<br><br>就職するためのポートフォリオとしてWebサービスをつくるのであれば人事の見たい技術力（例えばCRUDやしっかりしたバリデーション、題材に適した精度のコードとなっているか、ただ言われて作られたような成果物でないかなど）を示したものでないと他の募集者と差別化できなかったりします。<br><br>その場合、自分の入社したい会社が開催している勉強会やカリキュラムに混じり自分に足りないものを現地の人たちに聞いてみることが最短ルートでしょう。<br><br>このようにそもそも目標がなければ効果的な手法を絞ることができません。<br>とはいえ８割以上の方はおそらく「目標っていわれてもあんまり思い浮かばないなー」と思います。<br>別に急いでいるわけではないけどそのうち就職もしたいし、Webサービスも開発してみたいし、趣味でアルゴリズム作ってみたいとかもあるし、と入り混じっている人の方がリアルかと。<br><br>そうした「目標わからん」な人に最適な目標は「プログラミング中毒者を目指す」です。<br>急に運営者は頭に虫がわいたのかな？と心配になったかもしれません。<br><br>しかし自分が何年もろくにお金も発生せずに（むしろ支出が大きくてマイナス）プログラミングをしこしこと続けられたのは大前提としていつ何時でもコードについて考えることがだいたい楽しい状態まで自身を調教できたことが大きいです。<br><br>いきなり文調が過激になってしまい困惑したかもしれませんが実際にそのような人間にできあがってしまったものに嘘をついても仕方がありません。<br><br>冗談っぽく聞こえますがポジティブなニュアンスで中毒者になるということは意識して毎日コードを触っていたことが功を成しているなとは思っています。<br>引くかもしれませんがたまに夢の中でもコードを読んでいたりします。<br><br>もちろ<br>（詳細はプログラミング中毒者のなり方）<br><br>話を戻して、だからこそ自身の学習状況に応じて指針を示してくれるスクールだったりが普及しているわけです。<br>「野良開発のススメ」ではぼんやりではあるけれどWebサービスをつくれるようになりたい人を想定していますがそうした人はある程度は目標を定めることができるかもしれません。<br><br><br>//<br>あくまで大まかな手順であり途中で手順を往復したり、目標を変えた方向転換をしたりすることは自分にもありました。<br>おそらくプログラミング学習に関するどのようなことであったとしても上のプロセスを通ることになると考えます。<br><br>ただし、自分の実践していた方法は\"帰納法\"に近いやり方です。つまり、欲しい結果から逆算して必要なものだけ抽出していくやり方です。<br>基礎から勉強すべきという\"演繹法\"の方といっていることは異なります。<br><br>//他の記事の材料とする<br>特に①に関しては各々によりけりです。\"手っ取り早くお金を稼ぎたい\"という層がもっとも多いかもしれませんがこのニーズに対して自分より濃い発信をしている人たちがたくさんいるためそちらを参考にした方が良いかもしれません。<br><br>// 他の記事の材料とする<br>価値観の問題でしかありませんが、\"演繹法\"を重視する方も少なくありません。つまり、成果物よりも先に基礎から積み重ねていく派です。<br>コンピューターサイエンスから学びましょう、トレンドに流されずに歴史の長く需要の高い言語をしっかりと身につけた上で新しい言語にもトライしようとか、算数からやり直しましょうや国家資格（基本情報技術者）をとりあえず取得しましょうなどです。<br><br>ニワトリが先か卵が先かの問題であり、どちらが正しいなんておごがましいことは言えませんが、自分はプログラミングの世界は学べることに尽きのこない\"沼\"だと思っていて基礎から学ぶにしても終わりの見えない暗闇の中のトンネルを歩き続けるような難しさがあると思います。<br><br>そして実際に\"プログラミングを現実世界で活用する\"ということを重視したならば\"帰納法\"としての学習手順が今後もメインとなることでしょう。<br><br>例えば知人から簡易的な機能の実装における業務委託の仕事をもらったことがありますが使ったことのない技術やライブラリであったため必要な機能だけを分解して考えて実装するのはまさしく\"帰納法\"によるアプローチそのものでした。<br><br>学校の勉学が得意だったタイプであれば基礎から学んでも楽しく続けられると思います。しかし独学は基本的にフィードバックがもらえるわけもなく目標の目安となる着地点も見えてきません。<br>また現実ではクライアントから<br><br>独学のデメリットの記事へ誘導する<br></p><h3 id=\"h61bec34996\">運営者が独学でWebサービス開発した手順</h3><p>「じゃあ偉そうにそんなことを言うお前はどうしたの？」といったところですが「野良開発のススメ」を作る以前に実際に自分がつくった栄養サイトを例に上げます。<br>雰囲気が伝われば良いので知らない用語は無視してもらって構いません。<br><br>①プログラミングに関する目標を設定する<br>→栄養サイトのWebサービスを作りたい（JavaScriptの技術を使ったWebサービスサイトを開発したい）<br><br>②目標に必要な技術や成果物を調べる<br>→使ったことのないGatsbyJSと呼ばれるフレームワーク、拡張性やメンテナンス性をより良くするTypeScript、会員登録する機能をサーバレスで実装するためのFirebaseなど、コード自動修正するためのライブラリ、デザインツールのXDなどを使いたい<br>（自分にできるできないは完全に無視して作りたいものに必要な機能や必要な言語を箇条書きする）<br><br><span style=\"color:#030d1b\">③目標に必要な技術や成果物を分解して一つひとつで何か作る</span><br>→GatsbyJS、TypeScript、Firebaseなどのそれぞれの技術を題材に簡単なアプリやサイトを作る<br>（またはGatsbyJS + Firebaseだけで組み合わせたサイトを作ってみたりも含む。そのために必要なチュートリアルや講座なども一通りこなす）<br><br><span style=\"color:#030d1b\">④分解した一つひとつで何かを作るという小さな目標のそれぞれで②と③を繰り返す</span><br>→GatsbyJSを使えるようになりたい。②GatsbyJSはReactとGraphQL、静的サイトの生成に関する知見が必要だからそれらを順番に学習しよう（ReactとGraphQL、静的サイトの生成に関する知見のそれぞれを習得するため③へ）<br>→TypeScriptを使えるようになりたい。TypeScriptのチュートリアルをやろう。いきなりReactにTypeScriptを使うのはわけがわからないからJavaScriptで練習しよう。③へ...以下略<br><br><span style=\"color:#030d1b\">⑤目標に必要な技術を習得して成果物を完成させる</span><br>→栄養サイトを完成させる<br><br><br>さらっと本日の献立はこちら、のようなノリで書いていますが言うは易し行うは難しです。上の順序を独学で通っていくためには都度、適切な学習ツールを見つけてはこなしていくことを継続していく必要があります。<br><br>あくまで分かりやすい手順として紹介していますが実際の生々しい流れでいえば、いきなり①から⑤を始めてみてデザインだけはできたけどその後は手が全く動かなかった→やっぱり②と③、④の繰り返しだ。そして一旦また⑤へ行ってやっぱりダメだから...といった流れで何度か行き来しました。<br><br>Twitterにいるエンジニアなどはさらっと複数の技術を組み合わせて実装して「こんなのできました〜」と軽々しくやってのけていますがそれを実現させるための下積みの量が多いおかげで学習時間を大幅に省略しながら実装できています。<br><br>ピカソの１０秒で描いた落書きはピカソの人生を費やして身につけた技術による１０秒の絵だからクオリティが高い絵である。と言う考え方に少し近い？かもしれません。<br><br>ただし、センスのある人はそんな一つひとつでしっかりアプリを作ったりせずともいきなりさまざまな技術を組み合わせてもさらっと実装できてしまったりします。<br>こればっかりはどうしようもないことです。少なくともレアポケモンであり特別ですので変に比べて落ち込むのはやめておきましょう。<br><br>運営者もそのようなセンスを持ち合わせていないパンピーであったため時間はかかりましたが一つひとつの技術ごとに開発を行い技術を覚えていきました。<br>結果として個人でやるにはオーバーエンジニアリング（やりすぎ）な技術を使っていると思っていますがある程度は高品質なコードで開発できるようになりたかったため、そちらの方がやりがいを感じられて楽しいため選びました。<br></p><h2 id=\"h91bcacd6d3\">実践に手を動かしてみよう</h2><p>①プログラミングに関する目標を設定する<br>②目標に必要な技術や成果物を調べる<br>③目標に必要な技術や成果物を分解して一つひとつで何か作る<br>④分解した一つひとつで何かを作るという小さな目標のそれぞれで②と③を繰り返す<br>⑤目標に必要な技術を習得して成果物を完成させる<br><br>それぞれの手順を実践してみてください。<br>といっても項目ごとにポイントを解説しているのでご安心を。次のページは「①プログラミングに関する目標を設定する」です。<br><br>前のページへ 次のページへ<br><br><br><br>独学プログラミングは情報を組み立てて個人最適化すればできる<br>【帰納法のススメ】プログラミング独学は何からすべき？<br>英語で情報あさりのススメ<br>科学的に効果のある独学でできる勉強法の一覧<br>辛口版のプログラミングの独学に必要なモノ<br></p><h2 id=\"hbaf64a5b48\">独学プログラミングは情報を組み立てて個人最適化すればできる</h2><p>十徳ツールのようにある学習ツールをどのように自身に組み合わせて自身の目標を達成するために上手に使うことができれば独学でも十分にプログラミング学習をして個人でWebサービス開発ができるようにもなります。<br>自身が色々な学習ツールを利用してWebサービス開発できるようになった口なので。<br><br>これは自分だけがいっていることではありません。<br>「独学でプログラミングはできる」「スクールに通わずともプログラミングを覚えることができる」と主張するエンジニアの方は根拠として少し検索すれば色々な学習ツールが出てくるためそれらを触りながら自分で何かを作っていけばそれなりにコードが書けるようになる。<br>といったことを言っています。<br></p><h2 id=\"h24d6fa823e\">フロントエンドは特に英語情報が強い</h2><p><br></p>",
    "time": "2021-07-31T17:00:00.000Z",
    "thumbnail": {
      "url": "https://images.microcms-assets.io/assets/ae335419fcf84360abab9385ede92248/629914f677904dcda55a49b28d715e3d/nora11.jpg",
      "height": 271,
      "width": 880
    },
    "slug": "0yen",
    "genre": [
      "0yen"
    ],
    "isParent": true
  }
]